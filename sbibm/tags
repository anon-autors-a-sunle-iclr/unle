!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABCMeta	sbibm/third_party/kgof/data.py	/^from abc import ABCMeta, abstractmethod$/;"	i
ABCMeta	sbibm/third_party/kgof/density.py	/^from abc import ABCMeta, abstractmethod$/;"	i
ABCMeta	sbibm/third_party/kgof/goftest.py	/^from abc import ABCMeta, abstractmethod$/;"	i
ABCMeta	sbibm/third_party/kgof/intertst.py	/^from abc import ABCMeta, abstractmethod$/;"	i
ABCMeta	sbibm/third_party/kgof/kernel.py	/^from abc import ABCMeta, abstractmethod$/;"	i
ABCMeta	sbibm/third_party/kgof/mmd.py	/^from abc import ABCMeta, abstractmethod$/;"	i
AUTHOR	setup.py	/^AUTHOR = "Jan-Matthis Lueckmann"$/;"	v
Any	sbibm/algorithms/pyro/mcmc.py	/^from typing import Any, Dict, Optional$/;"	i
Any	sbibm/algorithms/pytorch/baseline_grid.py	/^from typing import Any, Optional$/;"	i
Any	sbibm/algorithms/pytorch/baseline_posterior.py	/^from typing import Any$/;"	i
Any	sbibm/algorithms/pytorch/baseline_prior.py	/^from typing import Any$/;"	i
Any	sbibm/algorithms/pytorch/baseline_rejection.py	/^from typing import Any, Optional$/;"	i
Any	sbibm/algorithms/pytorch/baseline_runtime.py	/^from typing import Any$/;"	i
Any	sbibm/algorithms/pytorch/baseline_sir.py	/^from typing import Any, Optional$/;"	i
Any	sbibm/algorithms/pytorch/utils/proposal.py	/^from typing import Any$/;"	i
Any	sbibm/algorithms/sbi/sl.py	/^from typing import Any, Dict, Optional$/;"	i
Any	sbibm/algorithms/sbi/snle.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Any	sbibm/algorithms/sbi/snre.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Any	sbibm/tasks/__init__.py	/^from typing import Any, List$/;"	i
Any	sbibm/tasks/simulator.py	/^from typing import Any, Callable, Optional$/;"	i
Any	sbibm/tasks/slcp/task.py	/^from typing import Any, Callable, Dict, Optional$/;"	i
Any	sbibm/tasks/task.py	/^from typing import Any, Callable, Dict, List, Optional, Union$/;"	i
Any	sbibm/tasks/two_moons/task.py	/^from typing import Any, Callable, Dict, Optional, Union$/;"	i
Any	sbibm/utils/pyro.py	/^from typing import Any, Callable, Dict$/;"	i
Any	sbibm/utils/tensorboard.py	/^from typing import Any, Callable$/;"	i
Any	sbibm/visualisation/correlation.py	/^from typing import Any, Dict, List, Optional$/;"	i
Any	sbibm/visualisation/metric.py	/^from typing import Any, Dict, List, Optional$/;"	i
Any	sbibm/visualisation/posterior.py	/^from typing import Any, Dict, List, Optional, Union$/;"	i
BatchClusterParameters	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^from independent_jobs.engines.BatchClusterParameters import BatchClusterParameters$/;"	i
BatchClusterParameters	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^from independent_jobs.engines.BatchClusterParameters import BatchClusterParameters$/;"	i
BatchClusterParameters	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^from independent_jobs.engines.BatchClusterParameters import BatchClusterParameters$/;"	i
BernoulliGLM	sbibm/tasks/__init__.py	/^        from sbibm.tasks.bernoulli_glm.task import BernoulliGLM$/;"	i
BernoulliGLM	sbibm/tasks/bernoulli_glm/task.py	/^class BernoulliGLM(Task):$/;"	c
Callable	sbibm/algorithms/pyabc/pyabc_utils.py	/^from typing import Callable, Dict, Optional, Tuple$/;"	i
Callable	sbibm/metrics/ksd.py	/^from typing import Callable, Optional$/;"	i
Callable	sbibm/tasks/bernoulli_glm/task.py	/^from typing import Callable, Dict, List, Optional$/;"	i
Callable	sbibm/tasks/gaussian_linear/task.py	/^from typing import Callable, Optional$/;"	i
Callable	sbibm/tasks/gaussian_linear_uniform/task.py	/^from typing import Callable, Dict, List, Optional, Tuple$/;"	i
Callable	sbibm/tasks/gaussian_mixture/task.py	/^from typing import Callable, Optional$/;"	i
Callable	sbibm/tasks/lotka_volterra/task.py	/^from typing import Callable, List, Optional$/;"	i
Callable	sbibm/tasks/simulator.py	/^from typing import Any, Callable, Optional$/;"	i
Callable	sbibm/tasks/sir/task.py	/^from typing import Callable, List, Optional$/;"	i
Callable	sbibm/tasks/slcp/task.py	/^from typing import Any, Callable, Dict, Optional$/;"	i
Callable	sbibm/tasks/task.py	/^from typing import Any, Callable, Dict, List, Optional, Union$/;"	i
Callable	sbibm/tasks/two_moons/task.py	/^from typing import Any, Callable, Dict, Optional, Union$/;"	i
Callable	sbibm/utils/pyro.py	/^from typing import Any, Callable, Dict$/;"	i
Callable	sbibm/utils/tensorboard.py	/^from typing import Any, Callable$/;"	i
ChunkIterable	sbibm/third_party/kgof/util.py	/^class ChunkIterable(object):$/;"	c
Command	setup.py	/^from setuptools import Command, find_packages, setup$/;"	i
ConstDiagMatrix	sbibm/third_party/igms/main.py	/^class ConstDiagMatrix(SquareMatrix):$/;"	c
ContextTimer	sbibm/third_party/kgof/util.py	/^class ContextTimer(object):$/;"	c
DESCRIPTION	setup.py	/^DESCRIPTION = "Simulation-based inference benchmark"$/;"	v
DSGamma	sbibm/third_party/kgof/data.py	/^class DSGamma(DataSource):$/;"	c
DSGaussBernRBM	sbibm/third_party/kgof/data.py	/^class DSGaussBernRBM(DataSource):$/;"	c
DSGaussCosFreqs	sbibm/third_party/kgof/data.py	/^class DSGaussCosFreqs(DataSource):$/;"	c
DSGaussianMixture	sbibm/third_party/kgof/data.py	/^class DSGaussianMixture(DataSource):$/;"	c
DSISILogPoissonLinear	sbibm/third_party/kgof/data.py	/^class DSISILogPoissonLinear(DataSource):$/;"	c
DSISIPoisson2D	sbibm/third_party/kgof/data.py	/^class DSISIPoisson2D(DataSource):$/;"	c
DSISIPoissonLinear	sbibm/third_party/kgof/data.py	/^class DSISIPoissonLinear(DataSource):$/;"	c
DSISIPoissonSine	sbibm/third_party/kgof/data.py	/^class DSISIPoissonSine(DataSource):$/;"	c
DSISISigmoidPoisson2D	sbibm/third_party/kgof/data.py	/^class DSISISigmoidPoisson2D(DataSource):$/;"	c
DSIsoGaussianMixture	sbibm/third_party/kgof/data.py	/^class DSIsoGaussianMixture(DataSource):$/;"	c
DSIsotropicNormal	sbibm/third_party/kgof/data.py	/^class DSIsotropicNormal(DataSource):$/;"	c
DSLaplace	sbibm/third_party/kgof/data.py	/^class DSLaplace(DataSource):$/;"	c
DSLogGamma	sbibm/third_party/kgof/data.py	/^class DSLogGamma(DataSource):$/;"	c
DSNormal	sbibm/third_party/kgof/data.py	/^class DSNormal(DataSource):$/;"	c
DSPoisson2D	sbibm/third_party/kgof/data.py	/^class DSPoisson2D(DataSource):$/;"	c
DSResample	sbibm/third_party/kgof/data.py	/^class DSResample(DataSource):$/;"	c
DSTDistribution	sbibm/third_party/kgof/data.py	/^class DSTDistribution(DataSource):$/;"	c
Data	sbibm/third_party/kgof/data.py	/^class Data(object):$/;"	c
DataSource	sbibm/third_party/kgof/data.py	/^class DataSource(with_metaclass(ABCMeta, object)):$/;"	c
DataWrapped	sbibm/metrics/ksd.py	/^class DataWrapped:$/;"	c
DenfensiveProposal	sbibm/algorithms/pytorch/baseline_rejection.py	/^from sbibm.algorithms.pytorch.utils.proposal import DenfensiveProposal$/;"	i
DenfensiveProposal	sbibm/algorithms/pytorch/baseline_sir.py	/^from sbibm.algorithms.pytorch.utils.proposal import DenfensiveProposal$/;"	i
DenfensiveProposal	sbibm/algorithms/pytorch/utils/proposal.py	/^class DenfensiveProposal:$/;"	c
Dict	sbibm/algorithms/pyabc/pyabc_utils.py	/^from typing import Callable, Dict, Optional, Tuple$/;"	i
Dict	sbibm/algorithms/pyro/mcmc.py	/^from typing import Any, Dict, Optional$/;"	i
Dict	sbibm/algorithms/sbi/sl.py	/^from typing import Any, Dict, Optional$/;"	i
Dict	sbibm/algorithms/sbi/snle.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Dict	sbibm/algorithms/sbi/snre.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Dict	sbibm/tasks/bernoulli_glm/task.py	/^from typing import Callable, Dict, List, Optional$/;"	i
Dict	sbibm/tasks/gaussian_linear_uniform/task.py	/^from typing import Callable, Dict, List, Optional, Tuple$/;"	i
Dict	sbibm/tasks/slcp/task.py	/^from typing import Any, Callable, Dict, Optional$/;"	i
Dict	sbibm/tasks/task.py	/^from typing import Any, Callable, Dict, List, Optional, Union$/;"	i
Dict	sbibm/tasks/two_moons/task.py	/^from typing import Any, Callable, Dict, Optional, Union$/;"	i
Dict	sbibm/utils/pyro.py	/^from typing import Any, Callable, Dict$/;"	i
Dict	sbibm/visualisation/correlation.py	/^from typing import Any, Dict, List, Optional$/;"	i
Dict	sbibm/visualisation/metric.py	/^from typing import Any, Dict, List, Optional$/;"	i
Dict	sbibm/visualisation/posterior.py	/^from typing import Any, Dict, List, Optional, Union$/;"	i
DiffEq	sbibm/tasks/lotka_volterra/task.py	/^from diffeqtorch import DiffEq$/;"	i
DiffEq	sbibm/tasks/sir/task.py	/^from diffeqtorch import DiffEq$/;"	i
DifferentiableKernel	sbibm/third_party/kgof/kernel.py	/^class DifferentiableKernel(with_metaclass(ABCMeta, Kernel)):$/;"	c
Distribution	sbibm/utils/nflows.py	/^from nflows.distributions.base import Distribution$/;"	i
EMAIL	setup.py	/^EMAIL = "mail@jan-matthis.de"$/;"	v
EXTRAS	setup.py	/^EXTRAS = {$/;"	v
EnergyStatistic	sbibm/third_party/torch_two_sample/main.py	/^class EnergyStatistic:$/;"	c
Ex1Job	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^class Ex1Job(IndependentJob):$/;"	c
Ex2Job	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^class Ex2Job(IndependentJob):$/;"	c
Ex3Job	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^class Ex3Job(IndependentJob):$/;"	c
ExpQuadKernel	sbibm/third_party/igms/main.py	/^class ExpQuadKernel(LazyKernel):$/;"	c
F	sbibm/utils/nflows.py	/^from torch.nn import functional as F$/;"	i
F401	sbibm/metrics/__init__.py	/^from sbibm.metrics.c2st import c2st  # noqa: F401$/;"	i
F401	sbibm/metrics/__init__.py	/^from sbibm.metrics.ksd import ksd  # noqa: F401$/;"	i
F401	sbibm/metrics/__init__.py	/^from sbibm.metrics.mmd import mmd  # noqa: F401$/;"	i
F401	sbibm/metrics/__init__.py	/^from sbibm.metrics.ppc import median_distance  # noqa: F401$/;"	i
FRStatistic	sbibm/third_party/torch_two_sample/main.py	/^class FRStatistic(object):$/;"	c
FSSD	sbibm/third_party/kgof/goftest.py	/^class FSSD(GofTest):$/;"	c
FSSDH0SimCovDraw	sbibm/third_party/kgof/goftest.py	/^class FSSDH0SimCovDraw(H0Simulator):$/;"	c
FSSDH0SimCovObs	sbibm/third_party/kgof/goftest.py	/^class FSSDH0SimCovObs(H0Simulator):$/;"	c
FlowWrapper	sbibm/algorithms/sbi/utils.py	/^from sbibm.utils.nflows import FlowWrapper$/;"	i
FlowWrapper	sbibm/utils/nflows.py	/^class FlowWrapper:$/;"	c
Function	sbibm/third_party/torch_two_sample/main.py	/^from torch.autograd import Function, Variable$/;"	i
Gamma	sbibm/third_party/kgof/density.py	/^class Gamma(UnnormalizedDensity):$/;"	c
GaussBernRBM	sbibm/third_party/kgof/density.py	/^class GaussBernRBM(UnnormalizedDensity):$/;"	c
GaussCosFreqs	sbibm/third_party/kgof/density.py	/^class GaussCosFreqs(UnnormalizedDensity):$/;"	c
GaussFSSD	sbibm/third_party/kgof/goftest.py	/^class GaussFSSD(FSSD):$/;"	c
GaussMETest	sbibm/third_party/kgof/intertst.py	/^class GaussMETest(gof.GofTest):$/;"	c
GaussMETestOpt	sbibm/third_party/kgof/intertst.py	/^class GaussMETestOpt(gof.GofTest):$/;"	c
GaussianLinear	sbibm/tasks/__init__.py	/^        from sbibm.tasks.gaussian_linear.task import GaussianLinear$/;"	i
GaussianLinear	sbibm/tasks/gaussian_linear/task.py	/^class GaussianLinear(Task):$/;"	c
GaussianLinearUniform	sbibm/tasks/__init__.py	/^        from sbibm.tasks.gaussian_linear_uniform.task import GaussianLinearUniform$/;"	i
GaussianLinearUniform	sbibm/tasks/gaussian_linear_uniform/task.py	/^class GaussianLinearUniform(Task):$/;"	c
GaussianMixture	sbibm/tasks/__init__.py	/^        from sbibm.tasks.gaussian_mixture.task import GaussianMixture$/;"	i
GaussianMixture	sbibm/tasks/gaussian_mixture/task.py	/^class GaussianMixture(Task):$/;"	c
GaussianMixture	sbibm/third_party/kgof/density.py	/^class GaussianMixture(UnnormalizedDensity):$/;"	c
GofTest	sbibm/third_party/kgof/goftest.py	/^class GofTest(with_metaclass(ABCMeta, object)):$/;"	c
H0Simulator	sbibm/third_party/kgof/goftest.py	/^class H0Simulator(with_metaclass(ABCMeta, object)):$/;"	c
HMC	sbibm/algorithms/pyro/mcmc.py	/^from pyro.infer.mcmc import HMC, NUTS$/;"	i
IMQFSSD	sbibm/third_party/kgof/goftest.py	/^class IMQFSSD(FSSD):$/;"	c
ISILogPoissonLinear	sbibm/third_party/kgof/density.py	/^class ISILogPoissonLinear(UnnormalizedDensity):$/;"	c
ISIPoisson2D	sbibm/third_party/kgof/density.py	/^class ISIPoisson2D(UnnormalizedDensity):$/;"	c
ISIPoissonLinear	sbibm/third_party/kgof/density.py	/^class ISIPoissonLinear(UnnormalizedDensity):$/;"	c
ISIPoissonSine	sbibm/third_party/kgof/density.py	/^class ISIPoissonSine(UnnormalizedDensity):$/;"	c
ISISigmoidPoisson2D	sbibm/third_party/kgof/density.py	/^class ISISigmoidPoisson2D(UnnormalizedDensity):$/;"	c
IndependentJob	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^from independent_jobs.jobs.IndependentJob import IndependentJob$/;"	i
IndependentJob	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^from independent_jobs.jobs.IndependentJob import IndependentJob$/;"	i
IndependentJob	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^from independent_jobs.jobs.IndependentJob import IndependentJob$/;"	i
IndependentTransform	sbibm/utils/pyro.py	/^from torch.distributions.transforms import IndependentTransform$/;"	i
IsoGaussianMixture	sbibm/third_party/kgof/density.py	/^class IsoGaussianMixture(UnnormalizedDensity):$/;"	c
IsotropicNormal	sbibm/third_party/kgof/density.py	/^class IsotropicNormal(UnnormalizedDensity):$/;"	c
Iterable	sbibm/utils/io.py	/^from typing import Iterable, Optional, Union$/;"	i
Js	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^Js = [2, 8, 32, 96, 384]$/;"	v
KDiagGauss	sbibm/third_party/kgof/kernel.py	/^class KDiagGauss(Kernel):$/;"	c
KFold	sbibm/metrics/c2st.py	/^from sklearn.model_selection import KFold, cross_val_score$/;"	i
KGauss	sbibm/metrics/ksd.py	/^from sbibm.third_party.kgof.kernel import KGauss$/;"	i
KGauss	sbibm/third_party/kgof/kernel.py	/^class KGauss(DifferentiableKernel, KSTKernel, LinearKSTKernel):$/;"	c
KIMQ	sbibm/third_party/kgof/kernel.py	/^class KIMQ(DifferentiableKernel, KSTKernel):$/;"	c
KMixGauss	sbibm/third_party/kgof/kernel.py	/^class KMixGauss(DifferentiableKernel, KSTKernel):$/;"	c
KMixture	sbibm/third_party/kgof/kernel.py	/^class KMixture(KSTKernel, LinearKSTKernel, DifferentiableKernel):$/;"	c
KNNStatistic	sbibm/third_party/torch_two_sample/main.py	/^class KNNStatistic(object):$/;"	c
KPoly	sbibm/third_party/kgof/kernel.py	/^class KPoly(DifferentiableKernel, KSTKernel):$/;"	c
KSTKernel	sbibm/third_party/kgof/kernel.py	/^class KSTKernel(with_metaclass(ABCMeta, Kernel)):$/;"	c
KSmallest	sbibm/third_party/torch_two_sample/main.py	/^class KSmallest(Function):$/;"	c
Kernel	sbibm/third_party/kgof/kernel.py	/^class Kernel(with_metaclass(ABCMeta, object)):$/;"	c
KernelSteinTest	sbibm/metrics/ksd.py	/^from sbibm.third_party.kgof.goftest import KernelSteinTest, bootstrapper_rademacher$/;"	i
KernelSteinTest	sbibm/third_party/kgof/goftest.py	/^class KernelSteinTest(GofTest):$/;"	c
LazyKernel	sbibm/third_party/igms/main.py	/^class LazyKernel(torch.nn.Module):$/;"	c
LikelihoodBasedPosterior	sbibm/algorithms/sbi/sl.py	/^from sbi.inference.posteriors.likelihood_based_posterior import LikelihoodBasedPosterior$/;"	i
LinearKSTKernel	sbibm/third_party/kgof/kernel.py	/^class LinearKSTKernel(with_metaclass(ABCMeta, Kernel)):$/;"	c
LinearKernelSteinTest	sbibm/third_party/kgof/goftest.py	/^class LinearKernelSteinTest(GofTest):$/;"	c
LinearRegression	sbibm/algorithms/sbi/smcabc.py	/^from sklearn.linear_model import LinearRegression$/;"	i
LinearRegression	sbibm/algorithms/sbi/utils.py	/^from sklearn.linear_model import LinearRegression$/;"	i
List	sbibm/tasks/__init__.py	/^from typing import Any, List$/;"	i
List	sbibm/tasks/bernoulli_glm/task.py	/^from typing import Callable, Dict, List, Optional$/;"	i
List	sbibm/tasks/gaussian_linear_uniform/task.py	/^from typing import Callable, Dict, List, Optional, Tuple$/;"	i
List	sbibm/tasks/lotka_volterra/task.py	/^from typing import Callable, List, Optional$/;"	i
List	sbibm/tasks/sir/task.py	/^from typing import Callable, List, Optional$/;"	i
List	sbibm/tasks/task.py	/^from typing import Any, Callable, Dict, List, Optional, Union$/;"	i
List	sbibm/visualisation/correlation.py	/^from typing import Any, Dict, List, Optional$/;"	i
List	sbibm/visualisation/metric.py	/^from typing import Any, Dict, List, Optional$/;"	i
List	sbibm/visualisation/posterior.py	/^from typing import Any, Dict, List, Optional, Union$/;"	i
LogGamma	sbibm/third_party/kgof/density.py	/^class LogGamma(UnnormalizedDensity):$/;"	c
LotkaVolterra	sbibm/tasks/__init__.py	/^        from sbibm.tasks.lotka_volterra.task import LotkaVolterra$/;"	i
LotkaVolterra	sbibm/tasks/lotka_volterra/task.py	/^class LotkaVolterra(Task):$/;"	c
MCABC	sbibm/algorithms/pyabc/pyabc_utils.py	/^from sbi.inference import MCABC$/;"	i
MCABC	sbibm/algorithms/sbi/mcabc.py	/^from sbi.inference import MCABC$/;"	i
MCMC	sbibm/algorithms/pyro/mcmc.py	/^from sbi.mcmc.mcmc import MCMC$/;"	i
MLPClassifier	sbibm/metrics/c2st.py	/^from sklearn.neural_network import MLPClassifier$/;"	i
MMDStatistic	sbibm/third_party/torch_two_sample/main.py	/^class MMDStatistic:$/;"	c
MSTFn	sbibm/third_party/torch_two_sample/main.py	/^class MSTFn(Function):$/;"	c
Matrix	sbibm/third_party/igms/main.py	/^class Matrix:$/;"	c
Multinomial	sbibm/utils/torch.py	/^from torch.distributions import Multinomial$/;"	i
NAME	setup.py	/^NAME = "sbibm"$/;"	v
NINF	sbibm/third_party/torch_two_sample/main.py	/^NINF = -1e5  # TODO(josipd): Implement computation with negative infinities.$/;"	v
NULLSIM_COVP	sbibm/third_party/kgof/goftest.py	/^    NULLSIM_COVP = 1$/;"	v	class:FSSD
NUTS	sbibm/algorithms/pyro/mcmc.py	/^from pyro.infer.mcmc import HMC, NUTS$/;"	i
Normal	sbibm/third_party/kgof/density.py	/^class Normal(UnnormalizedDensity):$/;"	c
NumpySeedContext	sbibm/third_party/kgof/util.py	/^class NumpySeedContext(object):$/;"	c
Optional	sbibm/algorithms/elfi/bolfi.py	/^from typing import Optional$/;"	i
Optional	sbibm/algorithms/pyabc/pyabc_utils.py	/^from typing import Callable, Dict, Optional, Tuple$/;"	i
Optional	sbibm/algorithms/pyabc/smcabc.py	/^from typing import Optional, Tuple$/;"	i
Optional	sbibm/algorithms/pyabcranger/abcrf.py	/^from typing import Optional$/;"	i
Optional	sbibm/algorithms/pyro/mcmc.py	/^from typing import Any, Dict, Optional$/;"	i
Optional	sbibm/algorithms/pytorch/baseline_grid.py	/^from typing import Any, Optional$/;"	i
Optional	sbibm/algorithms/pytorch/baseline_rejection.py	/^from typing import Any, Optional$/;"	i
Optional	sbibm/algorithms/pytorch/baseline_sir.py	/^from typing import Any, Optional$/;"	i
Optional	sbibm/algorithms/sbi/mcabc.py	/^from typing import Optional, Tuple$/;"	i
Optional	sbibm/algorithms/sbi/sl.py	/^from typing import Any, Dict, Optional$/;"	i
Optional	sbibm/algorithms/sbi/smcabc.py	/^from typing import Optional, Tuple$/;"	i
Optional	sbibm/algorithms/sbi/snle.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Optional	sbibm/algorithms/sbi/snpe.py	/^from typing import Optional, Tuple$/;"	i
Optional	sbibm/algorithms/sbi/snre.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Optional	sbibm/metrics/c2st.py	/^from typing import Optional$/;"	i
Optional	sbibm/metrics/ksd.py	/^from typing import Callable, Optional$/;"	i
Optional	sbibm/tasks/bernoulli_glm/task.py	/^from typing import Callable, Dict, List, Optional$/;"	i
Optional	sbibm/tasks/gaussian_linear/task.py	/^from typing import Callable, Optional$/;"	i
Optional	sbibm/tasks/gaussian_linear_uniform/task.py	/^from typing import Callable, Dict, List, Optional, Tuple$/;"	i
Optional	sbibm/tasks/gaussian_mixture/task.py	/^from typing import Callable, Optional$/;"	i
Optional	sbibm/tasks/lotka_volterra/task.py	/^from typing import Callable, List, Optional$/;"	i
Optional	sbibm/tasks/simulator.py	/^from typing import Any, Callable, Optional$/;"	i
Optional	sbibm/tasks/sir/task.py	/^from typing import Callable, List, Optional$/;"	i
Optional	sbibm/tasks/slcp/task.py	/^from typing import Any, Callable, Dict, Optional$/;"	i
Optional	sbibm/tasks/task.py	/^from typing import Any, Callable, Dict, List, Optional, Union$/;"	i
Optional	sbibm/tasks/two_moons/task.py	/^from typing import Any, Callable, Dict, Optional, Union$/;"	i
Optional	sbibm/utils/git.py	/^from typing import Optional$/;"	i
Optional	sbibm/utils/io.py	/^from typing import Iterable, Optional, Union$/;"	i
Optional	sbibm/utils/logging.py	/^from typing import Optional$/;"	i
Optional	sbibm/utils/nflows.py	/^from typing import Optional$/;"	i
Optional	sbibm/utils/torch.py	/^from typing import Optional$/;"	i
Optional	sbibm/visualisation/correlation.py	/^from typing import Any, Dict, List, Optional$/;"	i
Optional	sbibm/visualisation/metric.py	/^from typing import Any, Dict, List, Optional$/;"	i
Optional	sbibm/visualisation/posterior.py	/^from typing import Any, Dict, List, Optional, Union$/;"	i
OrderedDict	sbibm/utils/pyro.py	/^from collections import OrderedDict$/;"	i
Parallel	sbibm/tasks/task.py	/^        from joblib import Parallel, delayed$/;"	i
Path	sbibm/tasks/__init__.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/bernoulli_glm/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/gaussian_linear/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/gaussian_linear_uniform/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/gaussian_mixture/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/lotka_volterra/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/sir/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/slcp/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/tasks/two_moons/task.py	/^from pathlib import Path$/;"	i
Path	sbibm/utils/git.py	/^from pathlib import Path$/;"	i
Path	sbibm/utils/io.py	/^from pathlib import Path$/;"	i
Path	sbibm/utils/tensorboard.py	/^from pathlib import Path$/;"	i
Path	tests/metrics/test_fssd.py	/^from pathlib import Path$/;"	i
Path	tests/metrics/test_ksd.py	/^from pathlib import Path$/;"	i
PlotValues	sbibm/third_party/kgof/plot.py	/^class PlotValues(object):$/;"	c
Poisson2D	sbibm/third_party/kgof/density.py	/^class Poisson2D(UnnormalizedDensity):$/;"	c
PolynomialFeatures	sbibm/algorithms/sbi/utils.py	/^from sklearn.preprocessing import PolynomialFeatures$/;"	i
PyAbcSimulator	sbibm/algorithms/pyabc/pyabc_utils.py	/^class PyAbcSimulator:$/;"	c
PyPolyaGamma	sbibm/tasks/bernoulli_glm/task.py	/^        from pypolyagamma import PyPolyaGamma$/;"	i
QuadMMDGof	sbibm/third_party/kgof/mmd.py	/^class QuadMMDGof(gof.GofTest):$/;"	c
QuadMMDGofOpt	sbibm/third_party/kgof/mmd.py	/^class QuadMMDGofOpt(gof.GofTest):$/;"	c
REQUIRED	setup.py	/^REQUIRED = [$/;"	v
Resample	sbibm/third_party/kgof/density.py	/^class Resample(UnnormalizedDensity):$/;"	c
SIR	sbibm/tasks/__init__.py	/^        from sbibm.tasks.sir.task import SIR$/;"	i
SIR	sbibm/tasks/sir/task.py	/^class SIR(Task):$/;"	c
SLCP	sbibm/tasks/__init__.py	/^        from sbibm.tasks.slcp.task import SLCP$/;"	i
SLCP	sbibm/tasks/slcp/task.py	/^class SLCP(Task):$/;"	c
SMCABC	sbibm/algorithms/sbi/smcabc.py	/^from sbi.inference import SMCABC$/;"	i
SerialComputationEngine	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^from independent_jobs.engines.SerialComputationEngine import SerialComputationEngine$/;"	i
SerialComputationEngine	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^from independent_jobs.engines.SerialComputationEngine import SerialComputationEngine$/;"	i
SerialComputationEngine	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^from independent_jobs.engines.SerialComputationEngine import SerialComputationEngine$/;"	i
SimulationBudgetExceeded	sbibm/tasks/simulator.py	/^from sbibm.utils.exceptions import SimulationBudgetExceeded$/;"	i
SimulationBudgetExceeded	sbibm/utils/exceptions.py	/^class SimulationBudgetExceeded(Exception):$/;"	c
Simulator	sbibm/algorithms/elfi/bolfi.py	/^from sbibm.algorithms.elfi.utils.wrapper import Simulator$/;"	i
Simulator	sbibm/algorithms/elfi/utils/wrapper.py	/^class Simulator:$/;"	c
Simulator	sbibm/tasks/bernoulli_glm/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
Simulator	sbibm/tasks/gaussian_linear/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
Simulator	sbibm/tasks/gaussian_linear_uniform/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
Simulator	sbibm/tasks/gaussian_mixture/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
Simulator	sbibm/tasks/lotka_volterra/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
Simulator	sbibm/tasks/simulator.py	/^class Simulator:$/;"	c
Simulator	sbibm/tasks/sir/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
Simulator	sbibm/tasks/slcp/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
Simulator	sbibm/tasks/two_moons/task.py	/^from sbibm.tasks.simulator import Simulator$/;"	i
SimulatorWrapper	sbibm/algorithms/sbi/utils.py	/^class SimulatorWrapper:$/;"	c
SingleResult	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^from independent_jobs.results.SingleResult import SingleResult$/;"	i
SingleResult	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^from independent_jobs.results.SingleResult import SingleResult$/;"	i
SingleResult	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^from independent_jobs.results.SingleResult import SingleResult$/;"	i
SingleResultAggregator	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^from independent_jobs.aggregators.SingleResultAggregator import SingleResultAggregator$/;"	i
SingleResultAggregator	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^from independent_jobs.aggregators.SingleResultAggregator import SingleResultAggregator$/;"	i
SingleResultAggregator	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^from independent_jobs.aggregators.SingleResultAggregator import SingleResultAggregator$/;"	i
Slice	sbibm/algorithms/pyro/mcmc.py	/^from sbi.mcmc.slice import Slice$/;"	i
SlurmComputationEngine	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^from independent_jobs.engines.SlurmComputationEngine import SlurmComputationEngine$/;"	i
SlurmComputationEngine	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^from independent_jobs.engines.SlurmComputationEngine import SlurmComputationEngine$/;"	i
SlurmComputationEngine	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^from independent_jobs.engines.SlurmComputationEngine import SlurmComputationEngine$/;"	i
SmoothFRStatistic	sbibm/third_party/torch_two_sample/main.py	/^class SmoothFRStatistic(object):$/;"	c
SmoothKNNStatistic	sbibm/third_party/torch_two_sample/main.py	/^class SmoothKNNStatistic(object):$/;"	c
SquareMatrix	sbibm/third_party/igms/main.py	/^class SquareMatrix(Matrix):$/;"	c
StandardUniform	sbibm/utils/nflows.py	/^class StandardUniform(Distribution):$/;"	c
SteinWitness	sbibm/third_party/kgof/goftest.py	/^class SteinWitness(object):$/;"	c
SubsetRandomSampler	sbibm/utils/nflows.py	/^from torch.utils.data.sampler import SubsetRandomSampler$/;"	i
SummaryWriter	sbibm/utils/tensorboard.py	/^from torch.utils.tensorboard import SummaryWriter$/;"	i
SymmetricConstDiagMatrix	sbibm/third_party/igms/main.py	/^class SymmetricConstDiagMatrix(ConstDiagMatrix, SymmetricMatrix):$/;"	c
SymmetricMatrix	sbibm/third_party/igms/main.py	/^class SymmetricMatrix(SquareMatrix):$/;"	c
SynthLikNet	sbibm/algorithms/sbi/sl.py	/^class SynthLikNet(nn.Module):$/;"	c
Task	sbibm/algorithms/elfi/bolfi.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/elfi/utils/prior.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pyabc/pyabc_utils.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pyabc/smcabc.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pyabcranger/abcrf.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pyro/mcmc.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pytorch/baseline_grid.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pytorch/baseline_posterior.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pytorch/baseline_prior.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pytorch/baseline_rejection.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pytorch/baseline_runtime.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pytorch/baseline_sir.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/pytorch/utils/proposal.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/sbi/mcabc.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/sbi/sl.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/sbi/smcabc.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/sbi/snle.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/sbi/snpe.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/algorithms/sbi/snre.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/metrics/ksd.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/__init__.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/bernoulli_glm/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/gaussian_linear/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/gaussian_linear_uniform/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/gaussian_mixture/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/lotka_volterra/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/simulator.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/sir/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/slcp/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/tasks/task.py	/^class Task:$/;"	c
Task	sbibm/tasks/two_moons/task.py	/^from sbibm.tasks.task import Task$/;"	i
Task	sbibm/visualisation/posterior.py	/^from sbibm.tasks.task import Task$/;"	i
Tensor	sbibm/algorithms/sbi/sl.py	/^from torch import Tensor$/;"	i
TensorboardHandler	sbibm/utils/tensorboard.py	/^class TensorboardHandler(logging.Handler):$/;"	c
TestFSSD	sbibm/third_party/kgof/test/test_goftest.py	/^class TestFSSD(unittest.TestCase):$/;"	c
TestGaussianMixture	sbibm/third_party/kgof/test/test_density.py	/^class TestGaussianMixture(unittest.TestCase):$/;"	c
TestIsotropicNormal	sbibm/third_party/kgof/test/test_density.py	/^class TestIsotropicNormal(unittest.TestCase):$/;"	c
TestKGauss	sbibm/third_party/kgof/test/test_kernel.py	/^class TestKGauss(unittest.TestCase):$/;"	c
TestSteinWitness	sbibm/third_party/kgof/test/test_goftest.py	/^class TestSteinWitness(unittest.TestCase):$/;"	c
TraceEinsumEvaluator	sbibm/utils/pyro.py	/^class TraceEinsumEvaluator:$/;"	c
TransformedDistribution	sbibm/algorithms/sbi/utils.py	/^from torch.distributions.transformed_distribution import TransformedDistribution$/;"	i
TreeMarginals	sbibm/third_party/torch_two_sample/main.py	/^class TreeMarginals(object):$/;"	c
Tuple	sbibm/algorithms/pyabc/pyabc_utils.py	/^from typing import Callable, Dict, Optional, Tuple$/;"	i
Tuple	sbibm/algorithms/pyabc/smcabc.py	/^from typing import Optional, Tuple$/;"	i
Tuple	sbibm/algorithms/sbi/mcabc.py	/^from typing import Optional, Tuple$/;"	i
Tuple	sbibm/algorithms/sbi/smcabc.py	/^from typing import Optional, Tuple$/;"	i
Tuple	sbibm/algorithms/sbi/snle.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Tuple	sbibm/algorithms/sbi/snpe.py	/^from typing import Optional, Tuple$/;"	i
Tuple	sbibm/algorithms/sbi/snre.py	/^from typing import Any, Dict, Optional, Tuple$/;"	i
Tuple	sbibm/tasks/gaussian_linear_uniform/task.py	/^from typing import Callable, Dict, List, Optional, Tuple$/;"	i
TwoMoons	sbibm/tasks/__init__.py	/^        from sbibm.tasks.two_moons.task import TwoMoons$/;"	i
TwoMoons	sbibm/tasks/two_moons/task.py	/^class TwoMoons(Task):$/;"	c
TwoMoons	tests/tasks/two_moons/test_task.py	/^from sbibm.tasks.two_moons.task import TwoMoons$/;"	i
UDFromCallable	sbibm/third_party/kgof/density.py	/^class UDFromCallable(UnnormalizedDensity):$/;"	c
URL	setup.py	/^URL = "https:\/\/github.com\/sbi-benchmark\/sbibm"$/;"	v
Union	sbibm/tasks/task.py	/^from typing import Any, Callable, Dict, List, Optional, Union$/;"	i
Union	sbibm/tasks/two_moons/task.py	/^from typing import Any, Callable, Dict, Optional, Union$/;"	i
Union	sbibm/utils/io.py	/^from typing import Iterable, Optional, Union$/;"	i
Union	sbibm/visualisation/posterior.py	/^from typing import Any, Dict, List, Optional, Union$/;"	i
UnnormalizedDensity	sbibm/third_party/kgof/density.py	/^class UnnormalizedDensity(with_metaclass(ABCMeta, object)):$/;"	c
UnnormalizedDensity	tests/metrics/test_fssd.py	/^from sbibm.third_party.kgof.density import UnnormalizedDensity$/;"	i
UnnormalizedDensity	tests/metrics/test_ksd.py	/^from sbibm.third_party.kgof.density import UnnormalizedDensity$/;"	i
UnnormalizedDensityWrapped	sbibm/metrics/ksd.py	/^class UnnormalizedDensityWrapped:$/;"	c
UploadCommand	setup.py	/^class UploadCommand(Command):$/;"	c
VERSION	sbibm/__version__.py	/^VERSION = (1, 0, 7)$/;"	v
Variable	sbibm/third_party/torch_two_sample/main.py	/^from torch.autograd import Function, Variable$/;"	i
X	sbibm/algorithms/sbi/utils.py	/^            X=x,$/;"	v
X	sbibm/third_party/igms/main.py	/^    def X(self):$/;"	m	class:LazyKernel
_LIMITS_	sbibm/visualisation/posterior.py	/^_LIMITS_ = {$/;"	v
_LPMaker	sbibm/utils/pyro.py	/^class _LPMaker:$/;"	c
_Subsample	sbibm/utils/pyro.py	/^from pyro.poutine.subsample_messenger import _Subsample$/;"	i
__add__	sbibm/third_party/kgof/data.py	/^    def __add__(self, data2):$/;"	m	class:Data	file:
__author__	sbibm/third_party/kgof/data.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/density.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/glo.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/goftest.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/intertst.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/kernel.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/mmd.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/plot.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/test/test_density.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/test/test_goftest.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/test/test_kernel.py	/^__author__ = "wittawat"$/;"	v
__author__	sbibm/third_party/kgof/util.py	/^__author__ = "wittawat"$/;"	v
__call__	sbibm/algorithms/elfi/utils/wrapper.py	/^    def __call__(self, *args, batch_size=1, random_state=None):$/;"	m	class:Simulator	file:
__call__	sbibm/algorithms/pyabc/pyabc_utils.py	/^    def __call__(self, pyabc_parameter) -> Dict:$/;"	m	class:PyAbcSimulator	file:
__call__	sbibm/algorithms/sbi/utils.py	/^    def __call__(self, parameters, *args, **kwargs):$/;"	m	class:SimulatorWrapper	file:
__call__	sbibm/tasks/simulator.py	/^    def __call__(self, parameters: torch.Tensor, **kwargs: Any) -> torch.Tensor:$/;"	m	class:Simulator	file:
__call__	sbibm/third_party/kgof/goftest.py	/^    def __call__(self, V):$/;"	m	class:SteinWitness	file:
__call__	sbibm/third_party/torch_two_sample/main.py	/^    def __call__(self, d):$/;"	m	class:TreeMarginals	file:
__call__	sbibm/third_party/torch_two_sample/main.py	/^    def __call__(self, sample_1, sample_2, alphas, norm=2, ret_matrix=False):$/;"	m	class:SmoothFRStatistic	file:
__call__	sbibm/third_party/torch_two_sample/main.py	/^    def __call__(self, sample_1, sample_2, alphas, norm=2, ret_matrix=False):$/;"	m	class:SmoothKNNStatistic	file:
__call__	sbibm/third_party/torch_two_sample/main.py	/^    def __call__(self, sample_1, sample_2, alphas, ret_matrix=False):$/;"	m	class:MMDStatistic	file:
__call__	sbibm/third_party/torch_two_sample/main.py	/^    def __call__(self, sample_1, sample_2, norm=2, ret_matrix=False):$/;"	m	class:FRStatistic	file:
__call__	sbibm/third_party/torch_two_sample/main.py	/^    def __call__(self, sample_1, sample_2, norm=2, ret_matrix=False):$/;"	m	class:KNNStatistic	file:
__call__	sbibm/third_party/torch_two_sample/main.py	/^    def __call__(self, sample_1, sample_2, ret_matrix=False):$/;"	m	class:EnergyStatistic	file:
__copy__	sbibm/third_party/igms/main.py	/^    def __copy__(self):$/;"	m	class:LazyKernel	file:
__enter__	sbibm/third_party/kgof/util.py	/^    def __enter__(self):$/;"	m	class:ContextTimer	file:
__enter__	sbibm/third_party/kgof/util.py	/^    def __enter__(self):$/;"	m	class:NumpySeedContext	file:
__exit__	sbibm/third_party/kgof/util.py	/^    def __exit__(self, *args):$/;"	m	class:ContextTimer	file:
__exit__	sbibm/third_party/kgof/util.py	/^    def __exit__(self, *args):$/;"	m	class:NumpySeedContext	file:
__getattr__	sbibm/third_party/igms/main.py	/^    def __getattr__(self, name):$/;"	m	class:LazyKernel	file:
__getitem__	sbibm/third_party/igms/main.py	/^    def __getitem__(self, k):$/;"	m	class:LazyKernel	file:
__init__	sbibm/algorithms/elfi/utils/wrapper.py	/^    def __init__(self, simulator):$/;"	m	class:Simulator
__init__	sbibm/algorithms/pyabc/pyabc_utils.py	/^    def __init__(self, task):$/;"	m	class:PyAbcSimulator
__init__	sbibm/algorithms/pytorch/utils/proposal.py	/^    def __init__(self, dim, proposal, prior, prior_weight):$/;"	m	class:DenfensiveProposal
__init__	sbibm/algorithms/sbi/sl.py	/^    def __init__(self, simulator, num_simulations_per_step=100, diag_eps=0.0):$/;"	m	class:SynthLikNet
__init__	sbibm/algorithms/sbi/utils.py	/^    def __init__(self, simulator_fn, transforms):$/;"	m	class:SimulatorWrapper
__init__	sbibm/metrics/ksd.py	/^    def __init__(self, data):$/;"	m	class:DataWrapped
__init__	sbibm/metrics/ksd.py	/^    def __init__(self, log_prob_grad: Callable):$/;"	m	class:UnnormalizedDensityWrapped
__init__	sbibm/tasks/bernoulli_glm/task.py	/^    def __init__(self, summary="sufficient"):$/;"	m	class:BernoulliGLM
__init__	sbibm/tasks/gaussian_linear/task.py	/^    def __init__($/;"	m	class:GaussianLinear
__init__	sbibm/tasks/gaussian_linear_uniform/task.py	/^    def __init__($/;"	m	class:GaussianLinearUniform
__init__	sbibm/tasks/gaussian_mixture/task.py	/^    def __init__($/;"	m	class:GaussianMixture
__init__	sbibm/tasks/lotka_volterra/task.py	/^    def __init__($/;"	m	class:LotkaVolterra
__init__	sbibm/tasks/simulator.py	/^    def __init__($/;"	m	class:Simulator
__init__	sbibm/tasks/sir/task.py	/^    def __init__($/;"	m	class:SIR
__init__	sbibm/tasks/slcp/task.py	/^    def __init__(self, distractors: bool = False):$/;"	m	class:SLCP
__init__	sbibm/tasks/task.py	/^    def __init__($/;"	m	class:Task
__init__	sbibm/tasks/two_moons/task.py	/^    def __init__(self):$/;"	m	class:TwoMoons
__init__	sbibm/third_party/igms/main.py	/^    def __init__(self, *parts, sigma=1):$/;"	m	class:ExpQuadKernel
__init__	sbibm/third_party/igms/main.py	/^    def __init__(self, M):$/;"	m	class:SquareMatrix
__init__	sbibm/third_party/igms/main.py	/^    def __init__(self, M, const_diagonal=False):$/;"	m	class:Matrix
__init__	sbibm/third_party/igms/main.py	/^    def __init__(self, M, diag_value):$/;"	m	class:ConstDiagMatrix
__init__	sbibm/third_party/igms/main.py	/^    def __init__(self, X, *rest):$/;"	m	class:LazyKernel
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, B, b, c, burnin=2000):$/;"	m	class:DSGaussBernRBM
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, X):$/;"	m	class:DSResample
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, X):$/;"	m	class:Data
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, alpha, beta=1.0):$/;"	m	class:DSGamma
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, alpha, beta=1.0):$/;"	m	class:DSLogGamma
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, b):$/;"	m	class:DSISILogPoissonLinear
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, b):$/;"	m	class:DSISIPoissonLinear
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, d, loc=0, scale=1):$/;"	m	class:DSLaplace
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, df):$/;"	m	class:DSTDistribution
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, intensity="quadratic", w=1.0):$/;"	m	class:DSISIPoisson2D
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, intensity="quadratic", w=1.0, a=1.0):$/;"	m	class:DSISISigmoidPoisson2D
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, mean, cov):$/;"	m	class:DSNormal
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, mean, variance):$/;"	m	class:DSIsotropicNormal
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, means, variances, pmix=None):$/;"	m	class:DSGaussianMixture
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, means, variances, pmix=None):$/;"	m	class:DSIsoGaussianMixture
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, sigma2, freqs):$/;"	m	class:DSGaussCosFreqs
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, w, b, delta=0.001):$/;"	m	class:DSISIPoissonSine
__init__	sbibm/third_party/kgof/data.py	/^    def __init__(self, w=1.0):$/;"	m	class:DSPoisson2D
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self):$/;"	m	class:ISIPoisson2D
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, B, b, c):$/;"	m	class:GaussBernRBM
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, alpha, beta=1.0):$/;"	m	class:Gamma
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, alpha, beta=1.0):$/;"	m	class:LogGamma
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, b):$/;"	m	class:ISILogPoissonLinear
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, b):$/;"	m	class:ISIPoissonLinear
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, d, flog_den=None, fgrad_log=None):$/;"	m	class:UDFromCallable
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, fit):$/;"	m	class:Resample
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, intensity="quadratic", w=1.0, a=1.0):$/;"	m	class:ISISigmoidPoisson2D
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, mean, cov):$/;"	m	class:Normal
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, mean, variance):$/;"	m	class:IsotropicNormal
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, means, variances, pmix=None):$/;"	m	class:GaussianMixture
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, means, variances, pmix=None):$/;"	m	class:IsoGaussianMixture
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, sigma2, freqs):$/;"	m	class:GaussCosFreqs
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, w=1.0):$/;"	m	class:Poisson2D
__init__	sbibm/third_party/kgof/density.py	/^    def __init__(self, w=10.0, b=1.0):$/;"	m	class:ISIPoissonSine
__init__	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^    def __init__(self, aggregator, p, data_source, prob_label, rep, job_func, n):$/;"	m	class:Ex1Job
__init__	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^    def __init__($/;"	m	class:Ex2Job
__init__	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^    def __init__(self, aggregator, p, data_source, prob_label, rep, job_func, n_locs):$/;"	m	class:Ex3Job
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__($/;"	m	class:FSSD
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__($/;"	m	class:KernelSteinTest
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, n_draw=2000, n_simulate=3000, seed=10):$/;"	m	class:FSSDH0SimCovDraw
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, n_simulate, seed):$/;"	m	class:H0Simulator
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, n_simulate=3000, seed=10):$/;"	m	class:FSSDH0SimCovObs
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, p, alpha):$/;"	m	class:GofTest
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, p, b, c, V, alpha=0.01, n_simulate=3000, seed=10):$/;"	m	class:IMQFSSD
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, p, k, alpha=0.01, seed=11):$/;"	m	class:LinearKernelSteinTest
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, p, k, dat):$/;"	m	class:SteinWitness
__init__	sbibm/third_party/kgof/goftest.py	/^    def __init__(self, p, sigma2, V, alpha=0.01, n_simulate=3000, seed=10):$/;"	m	class:GaussFSSD
__init__	sbibm/third_party/kgof/intertst.py	/^    def __init__(self, p, gwidth2, test_locs, alpha=0.01, seed=28):$/;"	m	class:GaussMETest
__init__	sbibm/third_party/kgof/intertst.py	/^    def __init__(self, p, n_locs, tr_proportion=0.5, alpha=0.01, seed=29):$/;"	m	class:GaussMETestOpt
__init__	sbibm/third_party/kgof/kernel.py	/^    def __init__(self, b=-0.5, c=1.0):$/;"	m	class:KIMQ
__init__	sbibm/third_party/kgof/kernel.py	/^    def __init__(self, degree=3, gamma=None, coef0=1):$/;"	m	class:KPoly
__init__	sbibm/third_party/kgof/kernel.py	/^    def __init__(self, ks, wts=None):$/;"	m	class:KMixture
__init__	sbibm/third_party/kgof/kernel.py	/^    def __init__(self, sigma2):$/;"	m	class:KGauss
__init__	sbibm/third_party/kgof/kernel.py	/^    def __init__(self, sigma2s):$/;"	m	class:KDiagGauss
__init__	sbibm/third_party/kgof/kernel.py	/^    def __init__(self, sigma2s, wts=None):$/;"	m	class:KMixGauss
__init__	sbibm/third_party/kgof/mmd.py	/^    def __init__(self, p, k, n_permute=400, alpha=0.01, seed=28):$/;"	m	class:QuadMMDGof
__init__	sbibm/third_party/kgof/mmd.py	/^    def __init__(self, p, n_permute=400, alpha=0.01, seed=28):$/;"	m	class:QuadMMDGofOpt
__init__	sbibm/third_party/kgof/plot.py	/^    def __init__(self, xvalues, methods, plot_matrix):$/;"	m	class:PlotValues
__init__	sbibm/third_party/kgof/util.py	/^    def __init__(self, seed):$/;"	m	class:NumpySeedContext
__init__	sbibm/third_party/kgof/util.py	/^    def __init__(self, start, end, chunk_size):$/;"	m	class:ChunkIterable
__init__	sbibm/third_party/kgof/util.py	/^    def __init__(self, verbose=False):$/;"	m	class:ContextTimer
__init__	sbibm/third_party/torch_two_sample/main.py	/^    def __init__(self, n_1, n_2):$/;"	m	class:EnergyStatistic
__init__	sbibm/third_party/torch_two_sample/main.py	/^    def __init__(self, n_1, n_2):$/;"	m	class:FRStatistic
__init__	sbibm/third_party/torch_two_sample/main.py	/^    def __init__(self, n_1, n_2):$/;"	m	class:MMDStatistic
__init__	sbibm/third_party/torch_two_sample/main.py	/^    def __init__(self, n_1, n_2, cuda, compute_t_stat=True):$/;"	m	class:SmoothFRStatistic
__init__	sbibm/third_party/torch_two_sample/main.py	/^    def __init__(self, n_1, n_2, cuda, k, compute_t_stat=True):$/;"	m	class:SmoothKNNStatistic
__init__	sbibm/third_party/torch_two_sample/main.py	/^    def __init__(self, n_1, n_2, k):$/;"	m	class:KNNStatistic
__init__	sbibm/third_party/torch_two_sample/main.py	/^    def __init__(self, n_vertices, cuda):$/;"	m	class:TreeMarginals
__init__	sbibm/utils/nflows.py	/^    def __init__(self, flow, transform):$/;"	m	class:FlowWrapper
__init__	sbibm/utils/nflows.py	/^    def __init__(self, shape):$/;"	m	class:StandardUniform
__init__	sbibm/utils/pyro.py	/^    def __init__($/;"	m	class:_LPMaker
__init__	sbibm/utils/pyro.py	/^    def __init__(self, model_trace, has_enumerable_sites=False, max_plate_nesting=None):$/;"	m	class:TraceEinsumEvaluator
__init__	sbibm/utils/tensorboard.py	/^    def __init__($/;"	m	class:TensorboardHandler
__iter__	sbibm/third_party/kgof/util.py	/^    def __iter__(self):$/;"	m	class:ChunkIterable	file:
__name__	sbibm/algorithms/pyabc/pyabc_utils.py	/^    def __name__(self) -> str:$/;"	m	class:PyAbcSimulator	file:
__repr__	sbibm/third_party/igms/main.py	/^    def __repr__(self):$/;"	m	class:LazyKernel	file:
__repr__	sbibm/third_party/igms/main.py	/^    def __repr__(self):$/;"	m	class:Matrix	file:
__str__	sbibm/third_party/kgof/data.py	/^    def __str__(self):$/;"	m	class:Data	file:
__str__	sbibm/third_party/kgof/kernel.py	/^    def __str__(self):$/;"	m	class:KGauss	file:
__version__	sbibm/__init__.py	/^from sbibm.__version__ import __version__$/;"	i
__version__	sbibm/__version__.py	/^__version__ = ".".join(map(str, VERSION))$/;"	v
_apply	sbibm/third_party/igms/main.py	/^    def _apply(self, fn):  # used in to(), cuda(), etc$/;"	m	class:LazyKernel
_blocked_gibbs_next	sbibm/third_party/kgof/data.py	/^    def _blocked_gibbs_next(self, X, H):$/;"	m	class:DSGaussBernRBM
_cache	sbibm/third_party/igms/main.py	/^def _cache(f):$/;"	f
_compute	sbibm/third_party/igms/main.py	/^    def _compute(self, A, A_sqnorms, B, B_sqnorms):$/;"	m	class:ExpQuadKernel
_compute	sbibm/third_party/igms/main.py	/^    def _compute(self, A, B):$/;"	m	class:LazyKernel
_compute_one	sbibm/third_party/igms/main.py	/^    def _compute_one(self, a, b):$/;"	m	class:LazyKernel
_generate_noise_dist_parameters	sbibm/tasks/slcp/task.py	/^    def _generate_noise_dist_parameters(self):$/;"	m	class:SLCP
_get_log_factors	sbibm/utils/pyro.py	/^    def _get_log_factors(self, model_trace):$/;"	m	class:TraceEinsumEvaluator
_get_log_prob_fn	sbibm/tasks/task.py	/^    def _get_log_prob_fn($/;"	m	class:Task
_get_log_prob_fn	sbibm/tasks/two_moons/task.py	/^    def _get_log_prob_fn($/;"	m	class:TwoMoons
_get_log_prob_grad_fn	sbibm/tasks/task.py	/^    def _get_log_prob_grad_fn($/;"	m	class:Task
_get_log_prob_grad_fn	sbibm/tasks/two_moons/task.py	/^    def _get_log_prob_grad_fn($/;"	m	class:TwoMoons
_get_metest_opt	sbibm/third_party/kgof/intertst.py	/^    def _get_metest_opt(self, dat, op=None):$/;"	m	class:GaussMETestOpt
_get_observation_seed	sbibm/tasks/task.py	/^    def _get_observation_seed(self, num_observation: int) -> int:$/;"	m	class:Task
_get_pyro_model	sbibm/tasks/task.py	/^    def _get_pyro_model($/;"	m	class:Task
_get_reference_posterior	sbibm/tasks/gaussian_linear/task.py	/^    def _get_reference_posterior($/;"	m	class:GaussianLinear
_get_transforms	sbibm/tasks/slcp/task.py	/^    def _get_transforms($/;"	m	class:SLCP
_get_transforms	sbibm/tasks/task.py	/^    def _get_transforms($/;"	m	class:Task
_get_transforms	sbibm/tasks/two_moons/task.py	/^    def _get_transforms($/;"	m	class:TwoMoons
_guess_max_plate_nesting	sbibm/utils/pyro.py	/^def _guess_max_plate_nesting(model, args, kwargs):$/;"	f
_invalidate_cache	sbibm/third_party/igms/main.py	/^    def _invalidate_cache(self, i):$/;"	m	class:LazyKernel
_lazy_property	sbibm/utils/decorators.py	/^    def _lazy_property(self):$/;"	f	function:lazy_property
_likelihood	sbibm/tasks/two_moons/task.py	/^    def _likelihood($/;"	m	class:TwoMoons
_log_prob	sbibm/utils/nflows.py	/^    def _log_prob(self, inputs, context):$/;"	m	class:StandardUniform
_lp_fn	sbibm/utils/pyro.py	/^    def _lp_fn(self, params):$/;"	m	class:_LPMaker
_lp_fn_jit	sbibm/utils/pyro.py	/^    def _lp_fn_jit(self, skip_jit_warnings, jit_options, params):$/;"	m	class:_LPMaker
_lp_jit	sbibm/utils/pyro.py	/^            def _lp_jit(*zi):$/;"	f	function:_LPMaker._lp_fn_jit
_map_fun	sbibm/tasks/two_moons/task.py	/^    def _map_fun(parameters: torch.Tensor, p: torch.Tensor) -> torch.Tensor:$/;"	m	class:TwoMoons
_map_fun_inv	sbibm/tasks/two_moons/task.py	/^    def _map_fun_inv(parameters: torch.Tensor, x: torch.Tensor) -> torch.Tensor:$/;"	m	class:TwoMoons
_mean	sbibm/utils/nflows.py	/^    def _mean(self, context):$/;"	m	class:StandardUniform
_name_map	sbibm/third_party/igms/main.py	/^_name_map = {"X": 0, "Y": 1, "Z": 2}$/;"	v
_part	sbibm/third_party/igms/main.py	/^    def _part(self, i):$/;"	m	class:LazyKernel
_populate_cache	sbibm/utils/pyro.py	/^    def _populate_cache(self, model_trace):$/;"	m	class:TraceEinsumEvaluator
_precompute	sbibm/third_party/igms/main.py	/^    def _precompute(self, A):$/;"	m	class:ExpQuadKernel
_precompute	sbibm/third_party/igms/main.py	/^    def _precompute(self, A):$/;"	m	class:LazyKernel
_precompute_i	sbibm/third_party/igms/main.py	/^    def _precompute_i(self, i):$/;"	m	class:LazyKernel
_sample	sbibm/utils/nflows.py	/^    def _sample(self, num_samples, context):$/;"	m	class:StandardUniform
_sample_reference_posterior	sbibm/tasks/bernoulli_glm/task.py	/^    def _sample_reference_posterior($/;"	m	class:BernoulliGLM
_sample_reference_posterior	sbibm/tasks/gaussian_linear/task.py	/^    def _sample_reference_posterior($/;"	m	class:GaussianLinear
_sample_reference_posterior	sbibm/tasks/gaussian_linear_uniform/task.py	/^    def _sample_reference_posterior($/;"	m	class:GaussianLinearUniform
_sample_reference_posterior	sbibm/tasks/gaussian_mixture/task.py	/^    def _sample_reference_posterior($/;"	m	class:GaussianMixture
_sample_reference_posterior	sbibm/tasks/lotka_volterra/task.py	/^    def _sample_reference_posterior($/;"	m	class:LotkaVolterra
_sample_reference_posterior	sbibm/tasks/sir/task.py	/^    def _sample_reference_posterior($/;"	m	class:SIR
_sample_reference_posterior	sbibm/tasks/slcp/task.py	/^    def _sample_reference_posterior($/;"	m	class:SLCP
_sample_reference_posterior	sbibm/tasks/task.py	/^    def _sample_reference_posterior($/;"	m	class:Task
_sample_reference_posterior	sbibm/tasks/two_moons/task.py	/^    def _sample_reference_posterior($/;"	m	class:TwoMoons
_save_observation	sbibm/tasks/task.py	/^    def _save_observation(self, num_observation: int, observation: torch.Tensor):$/;"	m	class:Task
_save_observation_seed	sbibm/tasks/task.py	/^    def _save_observation_seed(self, num_observation: int, observation_seed: int):$/;"	m	class:Task
_save_reference_posterior_samples	sbibm/tasks/task.py	/^    def _save_reference_posterior_samples($/;"	m	class:Task
_save_true_parameters	sbibm/tasks/task.py	/^    def _save_true_parameters($/;"	m	class:Task
_setup	sbibm/tasks/bernoulli_glm/task.py	/^    def _setup(self, regenerate_stimulus=False):$/;"	m	class:BernoulliGLM
_setup	sbibm/tasks/task.py	/^    def _setup(self, n_jobs: int = -1, create_reference: bool = True, **kwargs: Any):$/;"	m	class:Task
about	setup.py	/^about = {}$/;"	v
absolute_import	sbibm/third_party/kgof/util.py	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
abstractmethod	sbibm/tasks/task.py	/^from abc import abstractmethod$/;"	i
abstractmethod	sbibm/third_party/kgof/data.py	/^from abc import ABCMeta, abstractmethod$/;"	i
abstractmethod	sbibm/third_party/kgof/density.py	/^from abc import ABCMeta, abstractmethod$/;"	i
abstractmethod	sbibm/third_party/kgof/goftest.py	/^from abc import ABCMeta, abstractmethod$/;"	i
abstractmethod	sbibm/third_party/kgof/intertst.py	/^from abc import ABCMeta, abstractmethod$/;"	i
abstractmethod	sbibm/third_party/kgof/kernel.py	/^from abc import ABCMeta, abstractmethod$/;"	i
abstractmethod	sbibm/third_party/kgof/mmd.py	/^from abc import ABCMeta, abstractmethod$/;"	i
acc	tests/algorithms/test_baseline_posterior.py	/^    acc = c2st(samples, reference_samples[:num_samples, :])$/;"	v
acc	tests/algorithms/test_baseline_rejection.py	/^    acc = c2st(samples, reference_samples[:num_samples, :])$/;"	v
acc	tests/algorithms/test_baseline_sir.py	/^    acc = c2st(samples, reference_samples[:num_samples, :])$/;"	v
activation	sbibm/utils/nflows.py	/^                                activation=F.relu,$/;"	v
activation	sbibm/utils/nflows.py	/^                                activation=torch.relu,$/;"	v
activation	sbibm/utils/nflows.py	/^                            activation=torch.tanh,$/;"	v
activation	sbibm/utils/nflows.py	/^            activation=torch.relu,$/;"	v
all_tasks	tests/tasks/test_task_interface.py	/^all_tasks = set(get_available_tasks())$/;"	v
alpha	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^alpha = 0.05$/;"	v
alpha	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^alpha = 0.05$/;"	v
alpha	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^alpha = 0.05$/;"	v
alt	sbibm/visualisation/correlation.py	/^import altair as alt$/;"	i
alt	sbibm/visualisation/metric.py	/^import altair as alt$/;"	i
alt	sbibm/visualisation/posterior.py	/^import altair as alt$/;"	i
annotations	sbibm/tasks/lotka_volterra/task.py	/^from __future__ import annotations$/;"	i
append_part	sbibm/third_party/igms/main.py	/^    def append_part(self, new):$/;"	m	class:LazyKernel
apply_unconditional_transform	sbibm/utils/nflows.py	/^                            apply_unconditional_transform=False,$/;"	v
as_matrix	sbibm/third_party/igms/main.py	/^def as_matrix(M, const_diagonal=False, symmetric=False):$/;"	f
as_tensors	sbibm/third_party/igms/main.py	/^    def as_tensors(self, *args, **kwargs):$/;"	m	class:LazyKernel
as_tensors	sbibm/third_party/igms/main.py	/^def as_tensors(X, *rest):$/;"	f
ascii_table	sbibm/third_party/kgof/plot.py	/^    def ascii_table(self, tablefmt="pipe"):$/;"	m	class:PlotValues
author	setup.py	/^    author=AUTHOR,$/;"	v
author_email	setup.py	/^    author_email=EMAIL,$/;"	v
autograd	sbibm/third_party/kgof/data.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/density.py	/^import autograd$/;"	i
autograd	sbibm/third_party/kgof/density.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/goftest.py	/^import autograd$/;"	i
autograd	sbibm/third_party/kgof/goftest.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/intertst.py	/^import autograd$/;"	i
autograd	sbibm/third_party/kgof/intertst.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/kernel.py	/^import autograd$/;"	i
autograd	sbibm/third_party/kgof/kernel.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/mmd.py	/^import autograd$/;"	i
autograd	sbibm/third_party/kgof/mmd.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/plot.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/test/test_kernel.py	/^import autograd$/;"	i
autograd	sbibm/third_party/kgof/test/test_kernel.py	/^import autograd.numpy as np$/;"	i
autograd	sbibm/third_party/kgof/util.py	/^import autograd.numpy as np$/;"	i
baseline_grid	sbibm/algorithms/pytorch/__init__.py	/^from sbibm.algorithms.pytorch.baseline_grid import run as baseline_grid$/;"	i
baseline_posterior	sbibm/algorithms/pytorch/__init__.py	/^from sbibm.algorithms.pytorch.baseline_posterior import run as baseline_posterior$/;"	i
baseline_prior	sbibm/algorithms/pytorch/__init__.py	/^from sbibm.algorithms.pytorch.baseline_prior import run as baseline_prior$/;"	i
baseline_rejection	sbibm/algorithms/pytorch/__init__.py	/^from sbibm.algorithms.pytorch.baseline_rejection import run as baseline_rejection$/;"	i
baseline_runtime	sbibm/algorithms/pytorch/__init__.py	/^from sbibm.algorithms.pytorch.baseline_runtime import run as baseline_runtime$/;"	i
baseline_sir	sbibm/algorithms/pytorch/__init__.py	/^from sbibm.algorithms.pytorch.baseline_sir import run as baseline_sir$/;"	i
batch_size	sbibm/utils/nflows.py	/^        batch_size=batch_size,$/;"	v
batch_size	sbibm/utils/nflows.py	/^        batch_size=min(batch_size, num_validation_examples),$/;"	v
batch_size	tests/algorithms/test_baseline_rejection.py	/^        batch_size=batch_size,$/;"	v
batch_size	tests/algorithms/test_baseline_sir.py	/^        batch_size=batch_size,$/;"	v
best_model_state_dict	sbibm/utils/nflows.py	/^            best_model_state_dict = deepcopy(flow.state_dict())$/;"	v
best_model_state_dict	sbibm/utils/nflows.py	/^    best_model_state_dict = None$/;"	v
best_validation_log_prob	sbibm/utils/nflows.py	/^            best_validation_log_prob = validation_log_prob$/;"	v
best_validation_log_prob	sbibm/utils/nflows.py	/^    best_validation_log_prob = -1e100$/;"	v
biject_to	sbibm/utils/pyro.py	/^from torch.distributions import biject_to$/;"	i
bootstrapper_multinomial	sbibm/third_party/kgof/goftest.py	/^def bootstrapper_multinomial(n):$/;"	f
bootstrapper_rademacher	sbibm/metrics/ksd.py	/^from sbibm.third_party.kgof.goftest import KernelSteinTest, bootstrapper_rademacher$/;"	i
bootstrapper_rademacher	sbibm/third_party/kgof/goftest.py	/^def bootstrapper_rademacher(n):$/;"	f
bound_by_data	sbibm/third_party/kgof/util.py	/^def bound_by_data(Z, Data):$/;"	f
bounded	tests/algorithms/test_baseline_rejection.py	/^        bounded=False,$/;"	v
bounded	tests/algorithms/test_baseline_sir.py	/^        bounded=False,$/;"	v
box_meshgrid	sbibm/third_party/kgof/plot.py	/^def box_meshgrid(func, xbound, ybound, nx=50, ny=50):$/;"	f
build_prior	sbibm/algorithms/elfi/bolfi.py	/^from sbibm.algorithms.elfi.utils.prior import build_prior$/;"	i
build_prior	sbibm/algorithms/elfi/utils/prior.py	/^def build_prior(task: Task, model: elfi.ElfiModel):$/;"	f
c2st	sbibm/metrics/__init__.py	/^from sbibm.metrics.c2st import c2st  # noqa: F401$/;"	i
c2st	sbibm/metrics/c2st.py	/^def c2st($/;"	f
c2st	tests/algorithms/sbi/test_abc_run_methods.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/algorithms/sbi/test_snle_posterior.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/algorithms/sbi/test_snpe_posterior.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/algorithms/sbi/test_snre_posterior.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/algorithms/test_baseline_posterior.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/algorithms/test_baseline_prior.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/algorithms/test_baseline_rejection.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/algorithms/test_baseline_sir.py	/^from sbibm.metrics.c2st import c2st$/;"	i
c2st	tests/metrics/test_c2st.py	/^from sbibm.metrics import c2st$/;"	i
c2st	tests/tasks/test_task_rej_abc_demo.py	/^from sbibm.metrics import c2st$/;"	i
c2st_auc	sbibm/metrics/c2st.py	/^def c2st_auc($/;"	f
ceil	sbibm/algorithms/elfi/bolfi.py	/^from math import ceil$/;"	i
change_part	sbibm/third_party/igms/main.py	/^    def change_part(self, i, new):$/;"	m	class:LazyKernel
check_random_state	tests/metrics/utils.py	/^from sklearn.utils import check_random_state$/;"	i
check_site_shape	sbibm/utils/pyro.py	/^from pyro.util import check_site_shape, ignore_jit_warnings$/;"	i
choice	sbibm/algorithms/pytorch/baseline_grid.py	/^from sbibm.utils.torch import choice$/;"	i
choice	sbibm/algorithms/pytorch/baseline_sir.py	/^from sbibm.utils.torch import choice$/;"	i
choice	sbibm/algorithms/pytorch/utils/proposal.py	/^from sbibm.utils.torch import choice$/;"	i
choice	sbibm/utils/torch.py	/^        from torch_sampling import choice$/;"	i
choice	sbibm/utils/torch.py	/^def choice(*args, **kwargs):$/;"	f
choice_numpy	sbibm/utils/torch.py	/^def choice_numpy($/;"	f
classifier_nn	sbibm/algorithms/sbi/snre.py	/^from sbi.utils.get_nn_models import classifier_nn$/;"	i
classifiers	setup.py	/^    classifiers=[$/;"	v
clip_grad_norm_	sbibm/utils/nflows.py	/^from torch.nn.utils import clip_grad_norm_$/;"	i
clip_int	sbibm/algorithms/pyabc/pyabc_utils.py	/^def clip_int(value, minimum, maximum):$/;"	f
clip_int	sbibm/algorithms/pyabc/smcabc.py	/^from sbibm.algorithms.sbi.utils import clip_int, get_sass_transform, run_lra$/;"	i
clip_int	sbibm/algorithms/sbi/smcabc.py	/^from .utils import clip_int$/;"	i
clip_int	sbibm/algorithms/sbi/utils.py	/^def clip_int(value, minimum, maximum):$/;"	f
clone	sbibm/third_party/kgof/data.py	/^    def clone(self):$/;"	m	class:Data
close_fn	sbibm/utils/tensorboard.py	/^    def close_fn():$/;"	f	function:tb_make_writer
cmdclass	setup.py	/^    cmdclass={$/;"	v
col_sums	sbibm/third_party/igms/main.py	/^    def col_sums(self):$/;"	m	class:Matrix
col_sums	sbibm/third_party/igms/main.py	/^    def col_sums(self):$/;"	m	class:SymmetricMatrix
col_sums_sq_sum	sbibm/third_party/igms/main.py	/^    def col_sums_sq_sum(self):$/;"	m	class:Matrix
col_sums_sq_sum	sbibm/third_party/igms/main.py	/^    def col_sums_sq_sum(self):$/;"	m	class:SymmetricMatrix
commit_sha	sbibm/utils/git.py	/^def commit_sha() -> Optional[str]:$/;"	f
compute	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^    def compute(self):$/;"	m	class:Ex1Job
compute	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^    def compute(self):$/;"	m	class:Ex2Job
compute	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^    def compute(self):$/;"	m	class:Ex3Job
compute_bwd	sbibm/third_party/torch_two_sample/main.py	/^def compute_bwd(node_pot, msg_in):$/;"	f
compute_fwd	sbibm/third_party/torch_two_sample/main.py	/^def compute_fwd(node_pot, msg_in):$/;"	f
compute_stat	sbibm/third_party/kgof/goftest.py	/^    def compute_stat(self, dat):$/;"	m	class:GofTest
compute_stat	sbibm/third_party/kgof/goftest.py	/^    def compute_stat(self, dat, return_feature_tensor=False):$/;"	m	class:FSSD
compute_stat	sbibm/third_party/kgof/goftest.py	/^    def compute_stat(self, dat, return_pointwise_stats=False):$/;"	m	class:LinearKernelSteinTest
compute_stat	sbibm/third_party/kgof/goftest.py	/^    def compute_stat(self, dat, return_ustat_gram=False):$/;"	m	class:KernelSteinTest
compute_stat	sbibm/third_party/kgof/intertst.py	/^    def compute_stat(self, dat):$/;"	m	class:GaussMETest
compute_stat	sbibm/third_party/kgof/intertst.py	/^    def compute_stat(self, dat, op=None):$/;"	m	class:GaussMETestOpt
compute_stat	sbibm/third_party/kgof/mmd.py	/^    def compute_stat(self, dat):$/;"	m	class:QuadMMDGof
compute_stat	sbibm/third_party/kgof/mmd.py	/^    def compute_stat(self, dat):$/;"	m	class:QuadMMDGofOpt
config	sbibm/third_party/kgof/glo.py	/^    import sbibm.third_party.kgof.config as config$/;"	i
config	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.config as config$/;"	i
config_enumerate	sbibm/utils/pyro.py	/^from pyro.infer import config_enumerate$/;"	i
const	sbibm/third_party/kgof/data.py	/^    def const(self, X):$/;"	m	class:DSPoisson2D
constrain	sbibm/third_party/kgof/util.py	/^def constrain(val, min_val, max_val):$/;"	f
context_features	sbibm/utils/nflows.py	/^                                context_features=context_features,$/;"	v
context_features	sbibm/utils/nflows.py	/^                            context_features=context_features,$/;"	v
context_features	sbibm/utils/nflows.py	/^            context_features=context_features,$/;"	v
context_features	sbibm/utils/nflows.py	/^    context_features = dim_context$/;"	v
contract_to_tensor	sbibm/utils/pyro.py	/^from pyro.ops.contract import contract_to_tensor$/;"	i
converged	sbibm/utils/nflows.py	/^            converged = True$/;"	v
converged	sbibm/utils/nflows.py	/^    converged = False$/;"	v
cov	sbibm/metrics/mvn_kl.py	/^def cov(m, rowvar=True, inplace=False):$/;"	f
create_alternating_binary_mask	sbibm/utils/nflows.py	/^from sbi.utils.torchutils import create_alternating_binary_mask$/;"	i
create_dirs	sbibm/third_party/kgof/glo.py	/^def create_dirs(full_path):$/;"	f
create_var	sbibm/third_party/torch_two_sample/main.py	/^    def create_var(val, *dims):$/;"	f	function:inference_cardinality
cross_sine_intensity	sbibm/third_party/kgof/data.py	/^    def cross_sine_intensity(self, X):$/;"	m	class:DSISIPoisson2D
cross_sine_intensity	sbibm/third_party/kgof/data.py	/^    def cross_sine_intensity(self, X):$/;"	m	class:DSISISigmoidPoisson2D
cross_val_score	sbibm/metrics/c2st.py	/^from sklearn.model_selection import KFold, cross_val_score$/;"	i
custom_initialization	sbibm/utils/nflows.py	/^            custom_initialization=True,$/;"	v
data	sbibm/metrics/ksd.py	/^    def data(self):$/;"	m	class:DataWrapped
data	sbibm/third_party/kgof/data.py	/^    def data(self):$/;"	m	class:Data
data	sbibm/third_party/kgof/density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	sbibm/utils/nflows.py	/^from torch.utils import data$/;"	i
data	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
data_file	sbibm/third_party/kgof/glo.py	/^def data_file(*relative_path):$/;"	f
data_folder	sbibm/third_party/kgof/glo.py	/^def data_folder():$/;"	f
dataset	sbibm/utils/nflows.py	/^    dataset = data.TensorDataset(dataset)$/;"	v
dataset	sbibm/utils/nflows.py	/^    dataset = dataset.to(device)$/;"	v
dataset	sbibm/utils/nflows.py	/^    dataset = transform(dataset)$/;"	v
de	sbibm/tasks/lotka_volterra/task.py	/^    def de(self):$/;"	m	class:LotkaVolterra
de	sbibm/tasks/sir/task.py	/^    def de(self):$/;"	m	class:SIR
deepcopy	sbibm/utils/nflows.py	/^from copy import deepcopy$/;"	i
delayed	sbibm/tasks/task.py	/^        from joblib import Parallel, delayed$/;"	i
den	sbibm/visualisation/correlation.py	/^import deneb as den$/;"	i
den	sbibm/visualisation/metric.py	/^import deneb as den$/;"	i
den	sbibm/visualisation/posterior.py	/^import deneb as den$/;"	i
density	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
density_estimator	tests/algorithms/test_baseline_rejection.py	/^        density_estimator="flow",$/;"	v
density_estimator	tests/algorithms/test_baseline_sir.py	/^        density_estimator="flow",$/;"	v
description	setup.py	/^    description = "Build and publish the package."$/;"	v	class:UploadCommand
description	setup.py	/^    description=DESCRIPTION,$/;"	v
device	sbibm/third_party/igms/main.py	/^    def device(self):$/;"	m	class:LazyKernel
device	sbibm/utils/nflows.py	/^    device = get_default_device()$/;"	v
diagonal	sbibm/third_party/igms/main.py	/^    def diagonal(self):$/;"	m	class:ConstDiagMatrix
diagonal	sbibm/third_party/igms/main.py	/^    def diagonal(self):$/;"	m	class:SquareMatrix
dim	sbibm/third_party/kgof/data.py	/^    def dim(self):$/;"	m	class:DSGaussBernRBM
dim	sbibm/third_party/kgof/data.py	/^    def dim(self):$/;"	m	class:DSGaussCosFreqs
dim	sbibm/third_party/kgof/data.py	/^    def dim(self):$/;"	m	class:DSResample
dim	sbibm/third_party/kgof/data.py	/^    def dim(self):$/;"	m	class:Data
dim	sbibm/third_party/kgof/data.py	/^    def dim(self):$/;"	m	class:DataSource
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:Gamma
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:GaussBernRBM
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:GaussCosFreqs
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:GaussianMixture
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:ISILogPoissonLinear
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:ISIPoisson2D
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:ISIPoissonLinear
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:ISIPoissonSine
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:ISISigmoidPoisson2D
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:IsoGaussianMixture
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:IsotropicNormal
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:LogGamma
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:Normal
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:Poisson2D
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:Resample
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:UDFromCallable
dim	sbibm/third_party/kgof/density.py	/^    def dim(self):$/;"	m	class:UnnormalizedDensity
dist	sbibm/utils/nflows.py	/^from torch import distributions as dist$/;"	i
dist	sbibm/utils/pyro.py	/^from pyro import distributions as dist$/;"	i
dist2_matrix	sbibm/third_party/kgof/util.py	/^def dist2_matrix(X, Y):$/;"	f
dist_matrix	sbibm/third_party/kgof/util.py	/^def dist_matrix(X, Y):$/;"	f
distance_fun	sbibm/algorithms/pyabc/pyabc_utils.py	/^        def distance_fun(x, y):$/;"	f	function:get_distance
distribution	sbibm/utils/nflows.py	/^        distribution = StandardUniform(shape=(dim_distribution,))$/;"	v
distribution	sbibm/utils/nflows.py	/^        distribution = distributions_.MADEMoG($/;"	v
distribution	sbibm/utils/nflows.py	/^        distribution = distributions_.StandardNormal((features,))$/;"	v
distributions	tests/metrics/test_fssd.py	/^import torch.distributions.transforms as transforms$/;"	i
distributions	tests/metrics/test_ksd.py	/^import torch.distributions.transforms as transforms$/;"	i
distributions_	sbibm/utils/nflows.py	/^from nflows import distributions as distributions_$/;"	i
division	sbibm/third_party/kgof/data.py	/^from __future__ import division, print_function$/;"	i
division	sbibm/third_party/kgof/density.py	/^from __future__ import division$/;"	i
division	sbibm/third_party/kgof/goftest.py	/^from __future__ import division$/;"	i
division	sbibm/third_party/kgof/kernel.py	/^from __future__ import division$/;"	i
division	sbibm/third_party/kgof/util.py	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
drop_last	sbibm/utils/nflows.py	/^        drop_last=True,$/;"	v
drop_last_part	sbibm/third_party/igms/main.py	/^    def drop_last_part(self):$/;"	m	class:LazyKernel
dropout_probability	sbibm/utils/nflows.py	/^                                dropout_probability=0.0,$/;"	v
dropout_probability	sbibm/utils/nflows.py	/^                            dropout_probability=0.0,$/;"	v
dropout_probability	sbibm/utils/nflows.py	/^            dropout_probability=0.0,$/;"	v
dtype	sbibm/third_party/igms/main.py	/^    def dtype(self):$/;"	m	class:LazyKernel
each_elem_true	sbibm/third_party/kgof/util.py	/^    def each_elem_true(x):$/;"	f	function:is_real_num
elfi	sbibm/algorithms/elfi/bolfi.py	/^import elfi$/;"	i
elfi	sbibm/algorithms/elfi/utils/prior.py	/^import elfi$/;"	i
emit	sbibm/utils/tensorboard.py	/^    def emit(self, record: logging.LogRecord):$/;"	m	class:TensorboardHandler
entry_points	setup.py	/^    entry_points={},$/;"	v
epochs	sbibm/utils/nflows.py	/^    epochs = 0$/;"	v
epochs_since_last_improvement	sbibm/utils/nflows.py	/^            epochs_since_last_improvement = 0$/;"	v
epochs_since_last_improvement	sbibm/utils/nflows.py	/^    epochs_since_last_improvement = 0$/;"	v
estimparam_args	sbibm/algorithms/pyabcranger/abcranger_utils.py	/^def estimparam_args(i, num_samples, ntrees, nthreads=1):$/;"	f
estimparam_args	sbibm/algorithms/pyabcranger/abcrf.py	/^from .abcranger_utils import estimparam_args$/;"	i
eval	sbibm/algorithms/sbi/sl.py	/^    def eval(self, *args, **kwargs):$/;"	m	class:SynthLikNet
eval	sbibm/third_party/kgof/kernel.py	/^    def eval(self, X, Y):$/;"	m	class:KDiagGauss
eval	sbibm/third_party/kgof/kernel.py	/^    def eval(self, X, Y):$/;"	m	class:KGauss
eval	sbibm/third_party/kgof/kernel.py	/^    def eval(self, X, Y):$/;"	m	class:KIMQ
eval	sbibm/third_party/kgof/kernel.py	/^    def eval(self, X, Y):$/;"	m	class:KMixGauss
eval	sbibm/third_party/kgof/kernel.py	/^    def eval(self, X, Y):$/;"	m	class:KMixture
eval	sbibm/third_party/kgof/kernel.py	/^    def eval(self, X, Y):$/;"	m	class:KPoly
eval	sbibm/third_party/kgof/kernel.py	/^    def eval(self, X, Y):$/;"	m	class:Kernel
ex	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^ex = 1$/;"	v
ex	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^ex = 2$/;"	v
ex	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^ex = 3$/;"	v
ex_file_exists	sbibm/third_party/kgof/glo.py	/^def ex_file_exists(ex, *relative_path):$/;"	f
ex_load_result	sbibm/third_party/kgof/glo.py	/^def ex_load_result(ex, *relative_path):$/;"	f
ex_result_file	sbibm/third_party/kgof/glo.py	/^def ex_result_file(ex, *relative_path):$/;"	f
ex_result_folder	sbibm/third_party/kgof/glo.py	/^def ex_result_folder(ex):$/;"	f
ex_save_result	sbibm/third_party/kgof/glo.py	/^def ex_save_result(ex, result, *relative_path):$/;"	f
expr_configs	sbibm/third_party/kgof/config.py	/^expr_configs = {$/;"	v
expr_configs	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^    from sbibm.third_party.kgof.config import expr_configs$/;"	i
expr_configs	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^    from sbibm.third_party.kgof.config import expr_configs$/;"	i
expr_configs	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^    from sbibm.third_party.kgof.config import expr_configs$/;"	i
extras_require	setup.py	/^    extras_require=EXTRAS,$/;"	v
fdata	sbibm/third_party/kgof/intertst.py	/^import freqopttest.data as fdata$/;"	i
fdata	sbibm/third_party/kgof/mmd.py	/^import freqopttest.data as fdata$/;"	i
feature_tensor	sbibm/third_party/kgof/goftest.py	/^    def feature_tensor(self, X):$/;"	m	class:FSSD
features	sbibm/utils/nflows.py	/^                            features=features,$/;"	v
features	sbibm/utils/nflows.py	/^            features=features,$/;"	v
features	sbibm/utils/nflows.py	/^    features = dim_distribution$/;"	v
fig_correlation	sbibm/visualisation/__init__.py	/^from .correlation import fig_correlation$/;"	i
fig_correlation	sbibm/visualisation/correlation.py	/^def fig_correlation($/;"	f
fig_metric	sbibm/visualisation/__init__.py	/^from .metric import fig_metric$/;"	i
fig_metric	sbibm/visualisation/metric.py	/^def fig_metric($/;"	f
fig_posterior	sbibm/visualisation/__init__.py	/^from .posterior import fig_posterior$/;"	i
fig_posterior	sbibm/visualisation/posterior.py	/^def fig_posterior($/;"	f
finalize_options	setup.py	/^    def finalize_options(self):$/;"	m	class:UploadCommand
find_packages	setup.py	/^from setuptools import Command, find_packages, setup$/;"	i
find_time	sbibm/third_party/kgof/data.py	/^    def find_time(self, x):$/;"	m	class:DSISIPoissonSine
fit_gaussian_draw	sbibm/third_party/kgof/util.py	/^def fit_gaussian_draw(X, J, seed=28, reg=1e-7, eig_pow=1.0):$/;"	f
flat_obj	sbibm/third_party/kgof/goftest.py	/^        def flat_obj(x):$/;"	f	function:GaussFSSD.optimize_locs_widths
flat_obj	sbibm/third_party/kgof/goftest.py	/^        def flat_obj(x):$/;"	f	function:IMQFSSD.optimize_locs
flat_obj	sbibm/third_party/kgof/goftest.py	/^        def flat_obj(x):$/;"	f	function:IMQFSSD.optimize_locs_params
flatten_data	sbibm/tasks/bernoulli_glm/task.py	/^    def flatten_data(self, data: torch.Tensor) -> torch.Tensor:$/;"	m	class:BernoulliGLM
flatten_data	sbibm/tasks/task.py	/^    def flatten_data(self, data: torch.Tensor) -> torch.Tensor:$/;"	m	class:Task
flow	sbibm/utils/nflows.py	/^    flow = FlowWrapper(flow, transform)$/;"	v
flow	sbibm/utils/nflows.py	/^    flow = flow.to(device)$/;"	v
flow_model	tests/algorithms/test_baseline_rejection.py	/^        flow_model="nsf",$/;"	v
flow_model	tests/algorithms/test_baseline_sir.py	/^        flow_model="nsf",$/;"	v
flows	sbibm/utils/nflows.py	/^from nflows import flows, transforms$/;"	i
fn	sbibm/utils/pyro.py	/^        fn = node["fn"]$/;"	v
for	sbibm/tasks/lotka_volterra/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
for	sbibm/tasks/sir/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
forward	sbibm/algorithms/sbi/sl.py	/^    def forward(self, *args, **kwargs):$/;"	m	class:SynthLikNet
forward	sbibm/third_party/torch_two_sample/main.py	/^    def forward(ctx, k, matrix):$/;"	m	class:KSmallest
forward	sbibm/third_party/torch_two_sample/main.py	/^    def forward(ctx, weights):$/;"	m	class:MSTFn
freqopttest	sbibm/third_party/kgof/intertst.py	/^import freqopttest.data as fdata$/;"	i
freqopttest	sbibm/third_party/kgof/intertst.py	/^import freqopttest.tst as tst$/;"	i
freqopttest	sbibm/third_party/kgof/mmd.py	/^import freqopttest.data as fdata$/;"	i
freqopttest	sbibm/third_party/kgof/mmd.py	/^import freqopttest.tst as tst$/;"	i
from_grad_log	sbibm/third_party/kgof/density.py	/^def from_grad_log(d, g):$/;"	f
from_log_den	sbibm/third_party/kgof/density.py	/^def from_log_den(d, f):$/;"	f
fssd_grid_search_kernel	sbibm/third_party/kgof/goftest.py	/^    def fssd_grid_search_kernel(p, dat, test_locs, list_kernel):$/;"	m	class:FSSD
fullprint	sbibm/third_party/kgof/util.py	/^def fullprint(*args, **kwargs):$/;"	f
func	sbibm/third_party/kgof/data.py	/^    def func(self, t):$/;"	m	class:DSISIPoissonSine
func_plot_fmt_map	sbibm/third_party/kgof/plot.py	/^def func_plot_fmt_map():$/;"	f
gaussbern_rbm_probs	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def gaussbern_rbm_probs(stds_perturb_B, dx=50, dh=10, n=sample_size):$/;"	f
gaussbern_rbm_tuple	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^def gaussbern_rbm_tuple(var, dx=50, dh=10, n=sample_size):$/;"	f
gbrbm_perturb	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def gbrbm_perturb(var_perturb_B, dx=50, dh=10):$/;"	f
gc	sbibm/tasks/lotka_volterra/task.py	/^import gc$/;"	i
get_H1_mean_variance	sbibm/third_party/kgof/goftest.py	/^    def get_H1_mean_variance(self, dat):$/;"	m	class:FSSD
get_available_tasks	sbibm/__init__.py	/^from sbibm.tasks import get_available_tasks, get_task, get_task_name_display$/;"	i
get_available_tasks	sbibm/tasks/__init__.py	/^def get_available_tasks() -> List[str]:$/;"	f
get_available_tasks	tests/tasks/test_task_benchmarks.py	/^from sbibm import get_available_tasks, get_task$/;"	i
get_available_tasks	tests/tasks/test_task_interface.py	/^from sbibm import get_available_tasks, get_task$/;"	i
get_available_tasks	tests/tasks/test_task_rej_abc_demo.py	/^from sbibm import get_available_tasks, get_task$/;"	i
get_classpath	sbibm/third_party/kgof/util.py	/^def get_classpath(obj):$/;"	f
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:Gamma
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:GaussCosFreqs
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:GaussianMixture
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:IsoGaussianMixture
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:IsotropicNormal
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:LogGamma
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:Normal
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self):$/;"	m	class:UnnormalizedDensity
get_datasource	sbibm/third_party/kgof/density.py	/^    def get_datasource(self, burnin=2000):$/;"	m	class:GaussBernRBM
get_default_device	sbibm/metrics/ksd.py	/^from sbibm.utils.torch import get_default_device$/;"	i
get_default_device	sbibm/metrics/mmd.py	/^from sbibm.utils.torch import get_default_device$/;"	i
get_default_device	sbibm/tasks/bernoulli_glm/task.py	/^from sbibm.utils.torch import get_default_device$/;"	i
get_default_device	sbibm/utils/io.py	/^from sbibm.utils.torch import get_default_device$/;"	i
get_default_device	sbibm/utils/nflows.py	/^from sbibm.utils.torch import get_default_device$/;"	i
get_default_device	sbibm/utils/torch.py	/^def get_default_device() -> torch.device:$/;"	f
get_density_cmap	sbibm/third_party/kgof/plot.py	/^def get_density_cmap():$/;"	f
get_distance	sbibm/algorithms/pyabc/pyabc_utils.py	/^def get_distance(distance: str) -> Callable:$/;"	f
get_float_from_csv	sbibm/utils/io.py	/^def get_float_from_csv($/;"	f
get_flow	sbibm/algorithms/pytorch/utils/proposal.py	/^from sbibm.utils.nflows import get_flow, train_flow$/;"	i
get_flow	sbibm/utils/nflows.py	/^def get_flow($/;"	f
get_func2label_map	sbibm/third_party/kgof/plot.py	/^def get_func2label_map():$/;"	f
get_func_tuples	sbibm/third_party/kgof/plot.py	/^def get_func_tuples():$/;"	f
get_kde	sbibm/algorithms/pyabc/smcabc.py	/^from sbi.utils import get_kde$/;"	i
get_kde	sbibm/algorithms/pytorch/utils/proposal.py	/^from sbi.utils import get_kde$/;"	i
get_labels_data	sbibm/tasks/task.py	/^    def get_labels_data(self) -> List[str]:$/;"	m	class:Task
get_labels_parameters	sbibm/tasks/lotka_volterra/task.py	/^    def get_labels_parameters(self) -> List[str]:$/;"	m	class:LotkaVolterra
get_labels_parameters	sbibm/tasks/sir/task.py	/^    def get_labels_parameters(self) -> List[str]:$/;"	m	class:SIR
get_labels_parameters	sbibm/tasks/task.py	/^    def get_labels_parameters(self) -> List[str]:$/;"	m	class:Task
get_log_prob_fn	sbibm/tasks/task.py	/^from sbibm.utils.pyro import get_log_prob_fn, get_log_prob_grad_fn$/;"	i
get_log_prob_fn	sbibm/utils/pyro.py	/^def get_log_prob_fn($/;"	f
get_log_prob_grad_fn	sbibm/tasks/task.py	/^from sbibm.utils.pyro import get_log_prob_fn, get_log_prob_grad_fn$/;"	i
get_log_prob_grad_fn	sbibm/utils/pyro.py	/^def get_log_prob_grad_fn($/;"	f
get_logger	sbibm/__init__.py	/^from sbibm.utils.logging import get_logger$/;"	i
get_logger	sbibm/utils/logging.py	/^def get_logger($/;"	f
get_lp_fn	sbibm/utils/pyro.py	/^    def get_lp_fn(self, jit_compile=False, skip_jit_warnings=True, jit_options=None):$/;"	m	class:_LPMaker
get_ndarray_from_csv	sbibm/utils/io.py	/^def get_ndarray_from_csv($/;"	f
get_ndarray_from_csv	sbibm/visualisation/posterior.py	/^from sbibm.utils.io import get_ndarray_from_csv$/;"	i
get_ns_pqsource	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def get_ns_pqsource(prob_label):$/;"	f
get_observation	sbibm/tasks/bernoulli_glm/task.py	/^    def get_observation(self, num_observation: int) -> torch.Tensor:$/;"	m	class:BernoulliGLM
get_observation	sbibm/tasks/slcp/task.py	/^    def get_observation(self, num_observation: int) -> torch.Tensor:$/;"	m	class:SLCP
get_observation	sbibm/tasks/task.py	/^    def get_observation(self, num_observation: int) -> torch.Tensor:$/;"	m	class:Task
get_pqsource	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^def get_pqsource(prob_label):$/;"	f
get_pqsource_list	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def get_pqsource_list(prob_label):$/;"	f
get_prior	sbibm/tasks/bernoulli_glm/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:BernoulliGLM
get_prior	sbibm/tasks/gaussian_linear/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:GaussianLinear
get_prior	sbibm/tasks/gaussian_linear_uniform/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:GaussianLinearUniform
get_prior	sbibm/tasks/gaussian_mixture/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:GaussianMixture
get_prior	sbibm/tasks/lotka_volterra/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:LotkaVolterra
get_prior	sbibm/tasks/sir/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:SIR
get_prior	sbibm/tasks/slcp/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:SLCP
get_prior	sbibm/tasks/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:Task
get_prior	sbibm/tasks/two_moons/task.py	/^    def get_prior(self) -> Callable:$/;"	m	class:TwoMoons
get_prior_dist	sbibm/tasks/task.py	/^    def get_prior_dist(self) -> torch.distributions.Distribution:$/;"	m	class:Task
get_prior_params	sbibm/tasks/task.py	/^    def get_prior_params(self) -> Dict[str, torch.Tensor]:$/;"	m	class:Task
get_proposal	sbibm/algorithms/pytorch/utils/proposal.py	/^def get_proposal($/;"	f
get_proposal	sbibm/tasks/lotka_volterra/task.py	/^        from sbibm.algorithms.pytorch.utils.proposal import get_proposal$/;"	i
get_proposal	sbibm/tasks/sir/task.py	/^        from sbibm.algorithms.pytorch.utils.proposal import get_proposal$/;"	i
get_proposal	sbibm/tasks/slcp/task.py	/^        from sbibm.algorithms.pytorch.utils.proposal import get_proposal$/;"	i
get_proposal	tests/algorithms/test_baseline_rejection.py	/^from sbibm.algorithms.pytorch.utils.proposal import get_proposal$/;"	i
get_proposal	tests/algorithms/test_baseline_sir.py	/^from sbibm.algorithms.pytorch.utils.proposal import get_proposal$/;"	i
get_reference_posterior_samples	sbibm/tasks/task.py	/^    def get_reference_posterior_samples(self, num_observation: int) -> torch.Tensor:$/;"	m	class:Task
get_results	sbibm/__init__.py	/^from sbibm.utils.io import get_results$/;"	i
get_results	sbibm/utils/io.py	/^def get_results($/;"	f
get_root	sbibm/third_party/kgof/glo.py	/^def get_root():$/;"	f
get_sass_transform	sbibm/algorithms/pyabc/smcabc.py	/^from sbibm.algorithms.sbi.utils import clip_int, get_sass_transform, run_lra$/;"	i
get_sass_transform	sbibm/algorithms/sbi/utils.py	/^def get_sass_transform(theta, x, expansion_degree=1, sample_weight=None):$/;"	f
get_simulator	sbibm/tasks/bernoulli_glm/task.py	/^    def get_simulator(self, max_calls: Optional[int] = None) -> Simulator:$/;"	m	class:BernoulliGLM
get_simulator	sbibm/tasks/gaussian_linear/task.py	/^    def get_simulator(self, max_calls: Optional[int] = None) -> Simulator:$/;"	m	class:GaussianLinear
get_simulator	sbibm/tasks/gaussian_linear_uniform/task.py	/^    def get_simulator(self, max_calls: Optional[int] = None) -> Simulator:$/;"	m	class:GaussianLinearUniform
get_simulator	sbibm/tasks/gaussian_mixture/task.py	/^    def get_simulator(self, max_calls: Optional[int] = None) -> Simulator:$/;"	m	class:GaussianMixture
get_simulator	sbibm/tasks/lotka_volterra/task.py	/^    def get_simulator($/;"	m	class:LotkaVolterra
get_simulator	sbibm/tasks/sir/task.py	/^    def get_simulator($/;"	m	class:SIR
get_simulator	sbibm/tasks/slcp/task.py	/^    def get_simulator(self, max_calls: Optional[int] = None) -> Simulator:$/;"	m	class:SLCP
get_simulator	sbibm/tasks/task.py	/^    def get_simulator(self) -> Callable:$/;"	m	class:Task
get_simulator	sbibm/tasks/two_moons/task.py	/^    def get_simulator(self, max_calls: Optional[int] = None) -> Simulator:$/;"	m	class:TwoMoons
get_task	sbibm/__init__.py	/^from sbibm.tasks import get_available_tasks, get_task, get_task_name_display$/;"	i
get_task	sbibm/tasks/__init__.py	/^def get_task(task_name: str, *args: Any, **kwargs: Any) -> Task:$/;"	f
get_task	tests/tasks/test_task_benchmarks.py	/^from sbibm import get_available_tasks, get_task$/;"	i
get_task	tests/tasks/test_task_interface.py	/^from sbibm import get_available_tasks, get_task$/;"	i
get_task	tests/tasks/test_task_rej_abc_demo.py	/^from sbibm import get_available_tasks, get_task$/;"	i
get_task_name_display	sbibm/__init__.py	/^from sbibm.tasks import get_available_tasks, get_task, get_task_name_display$/;"	i
get_task_name_display	sbibm/tasks/__init__.py	/^def get_task_name_display(task_name: str, *args: Any, **kwargs: Any) -> str:$/;"	f
get_tensor_from_csv	sbibm/tasks/bernoulli_glm/task.py	/^from sbibm.utils.io import get_tensor_from_csv$/;"	i
get_tensor_from_csv	sbibm/tasks/slcp/task.py	/^from sbibm.utils.io import get_tensor_from_csv, save_tensor_to_csv$/;"	i
get_tensor_from_csv	sbibm/tasks/task.py	/^from sbibm.utils.io import get_tensor_from_csv, save_tensor_to_csv$/;"	i
get_tensor_from_csv	sbibm/utils/io.py	/^def get_tensor_from_csv($/;"	f
get_true_parameters	sbibm/tasks/task.py	/^    def get_true_parameters(self, num_observation: int) -> torch.Tensor:$/;"	m	class:Task
glo	sbibm/third_party/kgof/config.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
glo	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
glo	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
glo	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
glo	sbibm/third_party/kgof/plot.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
glo	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
glo	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
glo	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
gmm_sample	sbibm/third_party/kgof/data.py	/^    def gmm_sample(self, mean=None, w=None, N=10000, n=10, d=2, seed=10):$/;"	m	class:DSPoisson2D
gof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
gof	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
grad	sbibm/utils/pyro.py	/^from torch.autograd import grad$/;"	i
gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def gradXY_sum(self, X, Y):$/;"	m	class:KGauss
gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def gradXY_sum(self, X, Y):$/;"	m	class:KIMQ
gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def gradXY_sum(self, X, Y):$/;"	m	class:KMixGauss
gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def gradXY_sum(self, X, Y):$/;"	m	class:KMixture
gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def gradXY_sum(self, X, Y):$/;"	m	class:KPoly
gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def gradXY_sum(self, X, Y):$/;"	m	class:KSTKernel
gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def gradX_Y(self, X, Y, dim):$/;"	m	class:KGauss
gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def gradX_Y(self, X, Y, dim):$/;"	m	class:KIMQ
gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def gradX_Y(self, X, Y, dim):$/;"	m	class:KMixGauss
gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def gradX_Y(self, X, Y, dim):$/;"	m	class:KMixture
gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def gradX_Y(self, X, Y, dim):$/;"	m	class:KPoly
gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def gradX_Y(self, X, Y, dim):$/;"	m	class:KSTKernel
gradX_y	sbibm/third_party/kgof/kernel.py	/^    def gradX_y(self, X, y):$/;"	m	class:DifferentiableKernel
gradX_y	sbibm/third_party/kgof/kernel.py	/^    def gradX_y(self, X, y):$/;"	m	class:KMixture
gradY_X	sbibm/third_party/kgof/kernel.py	/^    def gradY_X(self, X, Y, dim):$/;"	m	class:KGauss
gradY_X	sbibm/third_party/kgof/kernel.py	/^    def gradY_X(self, X, Y, dim):$/;"	m	class:KIMQ
gradY_X	sbibm/third_party/kgof/kernel.py	/^    def gradY_X(self, X, Y, dim):$/;"	m	class:KMixGauss
gradY_X	sbibm/third_party/kgof/kernel.py	/^    def gradY_X(self, X, Y, dim):$/;"	m	class:KMixture
gradY_X	sbibm/third_party/kgof/kernel.py	/^    def gradY_X(self, X, Y, dim):$/;"	m	class:KPoly
gradY_X	sbibm/third_party/kgof/kernel.py	/^    def gradY_X(self, X, Y, dim):$/;"	m	class:KSTKernel
grad_log	sbibm/metrics/ksd.py	/^    def grad_log(self, X: np.ndarray) -> np.ndarray:$/;"	m	class:UnnormalizedDensityWrapped
grad_log	sbibm/third_party/kgof/density.py	/^    def grad_log(self, X):$/;"	m	class:GaussBernRBM
grad_log	sbibm/third_party/kgof/density.py	/^    def grad_log(self, X):$/;"	m	class:UDFromCallable
grad_log	sbibm/third_party/kgof/density.py	/^    def grad_log(self, X):$/;"	m	class:UnnormalizedDensity
grid_search_gwidth	sbibm/third_party/kgof/goftest.py	/^    def grid_search_gwidth(p, dat, test_locs, list_gwidth):$/;"	m	class:GaussFSSD
has_enumerable_sites	sbibm/utils/pyro.py	/^            has_enumerable_sites = True$/;"	v
has_enumerable_sites	sbibm/utils/pyro.py	/^    has_enumerable_sites = False$/;"	v
here	setup.py	/^here = os.path.abspath(os.path.dirname(__file__))$/;"	v
hidden_features	sbibm/utils/nflows.py	/^                                hidden_features=hidden_features,$/;"	v
hidden_features	sbibm/utils/nflows.py	/^                            hidden_features=hidden_features,$/;"	v
hidden_features	sbibm/utils/nflows.py	/^            hidden_features=hidden_features,$/;"	v
hook_fn	sbibm/algorithms/pyro/utils/tensorboard.py	/^    def hook_fn(kernel, samples, stage, i):$/;"	f	function:tb_make_hook_fn
ignore_jit_warnings	sbibm/utils/pyro.py	/^from pyro.util import check_site_shape, ignore_jit_warnings$/;"	i
in_features	sbibm/utils/nflows.py	/^                                in_features=in_features,$/;"	v
include_package_data	setup.py	/^    include_package_data=True,$/;"	v
inference	sbibm/algorithms/sbi/sl.py	/^from sbi import inference as inference$/;"	i
inference	sbibm/algorithms/sbi/snle.py	/^from sbi import inference as inference$/;"	i
inference	sbibm/algorithms/sbi/snpe.py	/^from sbi import inference as inference$/;"	i
inference	sbibm/algorithms/sbi/snre.py	/^from sbi import inference as inference$/;"	i
inference_cardinality	sbibm/third_party/torch_two_sample/main.py	/^def inference_cardinality(node_potentials, cardinality_potential):$/;"	f
inh2d	sbibm/third_party/kgof/data.py	/^    def inh2d(self, lamb_bar=100000):$/;"	m	class:DSISIPoisson2D
inh2d	sbibm/third_party/kgof/data.py	/^    def inh2d(self, lamb_bar=100000):$/;"	m	class:DSISISigmoidPoisson2D
initialize_options	setup.py	/^    def initialize_options(self):$/;"	m	class:UploadCommand
inj	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import independent_jobs as inj$/;"	i
inj	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import independent_jobs as inj$/;"	i
inj	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import independent_jobs as inj$/;"	i
inputs	sbibm/utils/nflows.py	/^                inputs = (batch[0].to(device),)$/;"	v
inputs	sbibm/utils/nflows.py	/^            inputs = (batch[0],)  # .to(device),$/;"	v
install_requires	setup.py	/^    install_requires=REQUIRED,$/;"	v
int	sbibm/third_party/kgof/util.py	/^from builtins import int, range, zip$/;"	i
io	setup.py	/^import io$/;"	i
is_real_num	sbibm/third_party/kgof/util.py	/^def is_real_num(X):$/;"	f
is_rerun	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^is_rerun = False$/;"	v
is_rerun	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^is_rerun = False$/;"	v
is_rerun	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^is_rerun = False$/;"	v
is_validation_enabled	sbibm/utils/pyro.py	/^from pyro.infer.util import is_validation_enabled$/;"	i
iter_discrete_traces	sbibm/utils/pyro.py	/^from pyro.infer.enum import iter_discrete_traces$/;"	i
itertools	sbibm/metrics/mmd.py	/^import itertools$/;"	i
job_fssdJ10p_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ10p_opt(p, data_source, tr, te, r):$/;"	f
job_fssdJ10q_opt	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_fssdJ10q_opt(p, data_source, tr, te, r):$/;"	f
job_fssdJ10q_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ10q_opt(p, data_source, tr, te, r):$/;"	f
job_fssdJ1q_imq_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ1q_imq_opt(p, data_source, tr, te, r, J=1, null_sim=None):$/;"	f
job_fssdJ1q_imq_optbv	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ1q_imq_optbv(p, data_source, tr, te, r, J=1, null_sim=None):$/;"	f
job_fssdJ1q_imq_optv	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_fssdJ1q_imq_optv(p, data_source, tr, te, r, J=1, null_sim=None):$/;"	f
job_fssdJ1q_imq_optv	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ1q_imq_optv(p, data_source, tr, te, r, J=1, b=-0.5, null_sim=None):$/;"	f
job_fssdJ1q_med	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_fssdJ1q_med(p, data_source, tr, te, r, J=1, null_sim=None):$/;"	f
job_fssdJ1q_med	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ1q_med(p, data_source, tr, te, r, J=1, null_sim=None):$/;"	f
job_fssdJ1q_opt	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_fssdJ1q_opt(p, data_source, tr, te, r, J=1, null_sim=None):$/;"	f
job_fssdJ1q_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ1q_opt(p, data_source, tr, te, r, J=1, null_sim=None):$/;"	f
job_fssdJ5p_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5p_opt(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_imq_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_imq_opt(p, data_source, tr, te, r, null_sim=None):$/;"	f
job_fssdJ5q_imq_optbv	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_imq_optbv(p, data_source, tr, te, r, null_sim=None):$/;"	f
job_fssdJ5q_imq_optv	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_fssdJ5q_imq_optv(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_imq_optv	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_imq_optv(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_imqb1_optv	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_imqb1_optv(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_imqb2_optv	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_imqb2_optv(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_imqb3_optv	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_imqb3_optv(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_med	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_fssdJ5q_med(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_med	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_med(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_opt	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_fssdJ5q_opt(p, data_source, tr, te, r):$/;"	f
job_fssdJ5q_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_fssdJ5q_opt(p, data_source, tr, te, r):$/;"	f
job_fssdp_opt	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^def job_fssdp_opt(p, data_source, tr, te, r, J):$/;"	f
job_fssdq_med	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^def job_fssdq_med(p, data_source, tr, te, r, J, null_sim=None):$/;"	f
job_fssdq_opt	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^def job_fssdq_opt(p, data_source, tr, te, r, J, null_sim=None):$/;"	f
job_kstein_imq	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_kstein_imq(p, data_source, tr, te, r):$/;"	f
job_kstein_imq	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_kstein_imq(p, data_source, tr, te, r):$/;"	f
job_kstein_med	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_kstein_med(p, data_source, tr, te, r):$/;"	f
job_kstein_med	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_kstein_med(p, data_source, tr, te, r):$/;"	f
job_lin_kstein_med	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_lin_kstein_med(p, data_source, tr, te, r):$/;"	f
job_lin_kstein_med	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_lin_kstein_med(p, data_source, tr, te, r):$/;"	f
job_me_opt	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_me_opt(p, data_source, tr, te, r, J=5):$/;"	f
job_me_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_me_opt(p, data_source, tr, te, r, J=5):$/;"	f
job_mmd_dgauss_opt	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_mmd_dgauss_opt(p, data_source, tr, te, r):$/;"	f
job_mmd_med	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_mmd_med(p, data_source, tr, te, r):$/;"	f
job_mmd_med	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_mmd_med(p, data_source, tr, te, r):$/;"	f
job_mmd_opt	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def job_mmd_opt(p, data_source, tr, te, r):$/;"	f
job_mmd_opt	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def job_mmd_opt(p, data_source, tr, te, r):$/;"	f
joint	sbibm/third_party/igms/main.py	/^    def joint(self, *inds):$/;"	m	class:LazyKernel
joint_m	sbibm/third_party/igms/main.py	/^    def joint_m(self, *inds):$/;"	m	class:LazyKernel
julia_tasks	tests/tasks/test_task_interface.py	/^julia_tasks = set([tn for tn in get_available_tasks() if re.search("lotka|sir", tn)])$/;"	v
kernel	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kernel	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/config.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/data.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof as kgof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof as kgof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof as kgof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/glo.py	/^    import sbibm.third_party.kgof.config as config$/;"	i
kgof	sbibm/third_party/kgof/glo.py	/^import sbibm.third_party.kgof as kgof$/;"	i
kgof	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.config as config$/;"	i
kgof	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/plot.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
kgof	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof as kgof$/;"	i
kgof	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
kgof	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof$/;"	i
kgof	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
kgof	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
kgof	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
kgof	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
kgof	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
ksd	sbibm/metrics/__init__.py	/^from sbibm.metrics.ksd import ksd  # noqa: F401$/;"	i
ksd	sbibm/metrics/ksd.py	/^def ksd($/;"	f
ksd_gaussian_kernel	sbibm/metrics/ksd.py	/^def ksd_gaussian_kernel($/;"	f
lamb_sin	sbibm/third_party/kgof/data.py	/^    def lamb_sin(self, X):$/;"	m	class:DSPoisson2D
lamb_sin	sbibm/third_party/kgof/density.py	/^    def lamb_sin(self, X):$/;"	m	class:Poisson2D
lazy_property	sbibm/tasks/lotka_volterra/task.py	/^from sbibm.utils.decorators import lazy_property$/;"	i
lazy_property	sbibm/tasks/sir/task.py	/^from sbibm.utils.decorators import lazy_property$/;"	i
lazy_property	sbibm/utils/decorators.py	/^def lazy_property(fn):$/;"	f
license	setup.py	/^    license="MIT",$/;"	v
likelihood_nn	sbibm/algorithms/sbi/snle.py	/^from sbi.utils.get_nn_models import likelihood_nn$/;"	i
list_simulate_spectral	sbibm/third_party/kgof/goftest.py	/^    def list_simulate_spectral(cov, J, n_simulate=1000, seed=82):$/;"	m	class:FSSD
load_data_file	sbibm/third_party/kgof/glo.py	/^def load_data_file(*relative_path):$/;"	f
log	sbibm/metrics/ksd.py	/^log = logging.getLogger(__name__)$/;"	v
log	sbibm/metrics/mmd.py	/^log = logging.getLogger(__name__)$/;"	v
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, S):$/;"	m	class:ISISigmoidPoisson2D
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:Gamma
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:GaussBernRBM
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:GaussCosFreqs
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:GaussianMixture
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:ISILogPoissonLinear
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:ISIPoisson2D
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:ISIPoissonLinear
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:ISIPoissonSine
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:IsoGaussianMixture
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:IsotropicNormal
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:LogGamma
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:Normal
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:Poisson2D
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:Resample
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:UDFromCallable
log_den	sbibm/third_party/kgof/density.py	/^    def log_den(self, X):$/;"	m	class:UnnormalizedDensity
log_normalized_den	sbibm/third_party/kgof/density.py	/^    def log_normalized_den(self, X):$/;"	m	class:GaussianMixture
log_normalized_den	sbibm/third_party/kgof/density.py	/^    def log_normalized_den(self, X):$/;"	m	class:IsoGaussianMixture
log_normalized_den	sbibm/third_party/kgof/density.py	/^    def log_normalized_den(self, X):$/;"	m	class:IsotropicNormal
log_normalized_den	sbibm/third_party/kgof/density.py	/^    def log_normalized_den(self, X):$/;"	m	class:UnnormalizedDensity
log_prob	sbibm/algorithms/pytorch/utils/proposal.py	/^    def log_prob(self, parameters):$/;"	m	class:DenfensiveProposal
log_prob	sbibm/algorithms/sbi/sl.py	/^    def log_prob(self, inputs: Tensor, context=Optional[Tensor]) -> Tensor:$/;"	m	class:SynthLikNet
log_prob	sbibm/utils/nflows.py	/^                log_prob = flow.log_prob(inputs[0])$/;"	v
log_prob	sbibm/utils/nflows.py	/^            log_prob = flow.log_prob(inputs[0])$/;"	v
log_prob	sbibm/utils/nflows.py	/^    def log_prob(self, parameters_constrained):$/;"	m	class:FlowWrapper
log_prob	sbibm/utils/pyro.py	/^    def log_prob(self, model_trace):$/;"	m	class:TraceEinsumEvaluator
log_prob_experimental	sbibm/tasks/task.py	/^        def log_prob_experimental(parameters):$/;"	f	function:Task._get_log_prob_fn
log_prob_fn	sbibm/tasks/two_moons/task.py	/^        def log_prob_fn(parameters):$/;"	f	function:TwoMoons._get_log_prob_fn
log_prob_grad_fn	sbibm/tasks/two_moons/task.py	/^        def log_prob_grad_fn(parameters):$/;"	f	function:TwoMoons._get_log_prob_grad_fn
log_prob_grad_fn	sbibm/utils/pyro.py	/^    def log_prob_grad_fn(z):$/;"	f	function:make_log_prob_grad_fn
log_prob_grad_numpy	sbibm/metrics/ksd.py	/^        def log_prob_grad_numpy(parameters: np.ndarray) -> np.ndarray:$/;"	f	function:ksd
log_prob_grad_pyro	sbibm/tasks/task.py	/^        def log_prob_grad_pyro(parameters):$/;"	f	function:Task._get_log_prob_grad_fn
log_prob_prior	sbibm/algorithms/pytorch/utils/proposal.py	/^    def log_prob_prior(self, parameters):$/;"	m	class:DenfensiveProposal
log_prob_proposal	sbibm/algorithms/pytorch/utils/proposal.py	/^    def log_prob_proposal(self, parameters):$/;"	m	class:DenfensiveProposal
log_prob_pyro	sbibm/tasks/task.py	/^        def log_prob_pyro(parameters):$/;"	f	function:Task._get_log_prob_fn
log_prob_sum	sbibm/utils/nflows.py	/^        log_prob_sum = 0$/;"	v
logaddexp	sbibm/third_party/torch_two_sample/main.py	/^def logaddexp(x, y):$/;"	f
logger	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^from independent_jobs.tools.Log import logger$/;"	i
logger	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^from independent_jobs.tools.Log import logger$/;"	i
logger	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^from independent_jobs.tools.Log import logger$/;"	i
logging	sbibm/algorithms/elfi/bolfi.py	/^import logging$/;"	i
logging	sbibm/algorithms/elfi/utils/prior.py	/^import logging$/;"	i
logging	sbibm/algorithms/pyabc/pyabc_utils.py	/^import logging$/;"	i
logging	sbibm/algorithms/sbi/sl.py	/^import logging$/;"	i
logging	sbibm/algorithms/sbi/snle.py	/^import logging$/;"	i
logging	sbibm/algorithms/sbi/snpe.py	/^import logging$/;"	i
logging	sbibm/algorithms/sbi/snre.py	/^import logging$/;"	i
logging	sbibm/metrics/ksd.py	/^import logging$/;"	i
logging	sbibm/metrics/mmd.py	/^import logging$/;"	i
logging	sbibm/tasks/gaussian_linear_uniform/task.py	/^import logging$/;"	i
logging	sbibm/tasks/gaussian_mixture/task.py	/^import logging$/;"	i
logging	sbibm/third_party/kgof/density.py	/^import logging$/;"	i
logging	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import logging$/;"	i
logging	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import logging$/;"	i
logging	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import logging$/;"	i
logging	sbibm/third_party/kgof/goftest.py	/^import logging$/;"	i
logging	sbibm/third_party/kgof/intertst.py	/^import logging$/;"	i
logging	sbibm/third_party/kgof/mmd.py	/^import logging$/;"	i
logging	sbibm/utils/logging.py	/^import logging$/;"	i
logging	sbibm/utils/tensorboard.py	/^import logging$/;"	i
logsumexp	sbibm/third_party/torch_two_sample/main.py	/^def logsumexp(x, dim):$/;"	f
long_description	setup.py	/^        long_description = "\\n" + f.read()$/;"	v
long_description	setup.py	/^    long_description = DESCRIPTION$/;"	v
long_description	setup.py	/^    long_description=long_description,$/;"	v
long_description_content_type	setup.py	/^    long_description_content_type="text\/markdown",$/;"	v
loss	sbibm/utils/nflows.py	/^            loss = -torch.mean(log_prob)$/;"	v
lp_fn	sbibm/utils/pyro.py	/^        def lp_fn(input_dict):$/;"	f
lp_fn	sbibm/utils/pyro.py	/^        lp_fn = lp_maker.get_lp_fn(jit_compile, skip_jit_warnings, jit_options)$/;"	v
lp_grad_fn	sbibm/utils/pyro.py	/^    lp_grad_fn = make_log_prob_grad_fn(lp_fn)$/;"	v
lp_maker	sbibm/utils/pyro.py	/^        lp_maker = _LPMaker($/;"	v
main	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def main():$/;"	f
main	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def main():$/;"	f
main	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^def main():$/;"	f
make_log_prob_grad_fn	sbibm/tasks/two_moons/task.py	/^from sbibm.utils.pyro import make_log_prob_grad_fn$/;"	i
make_log_prob_grad_fn	sbibm/utils/pyro.py	/^def make_log_prob_grad_fn(log_prob_fn):$/;"	f
mask	sbibm/utils/nflows.py	/^                            mask=create_alternating_binary_mask($/;"	v
math	sbibm/algorithms/pytorch/baseline_grid.py	/^import math$/;"	i
math	sbibm/algorithms/pytorch/baseline_rejection.py	/^import math$/;"	i
math	sbibm/algorithms/pytorch/utils/proposal.py	/^import math$/;"	i
math	sbibm/algorithms/sbi/sl.py	/^import math$/;"	i
math	sbibm/algorithms/sbi/snle.py	/^import math$/;"	i
math	sbibm/algorithms/sbi/snpe.py	/^import math$/;"	i
math	sbibm/algorithms/sbi/snre.py	/^import math$/;"	i
math	sbibm/metrics/ksd.py	/^import math$/;"	i
math	sbibm/tasks/sir/task.py	/^import math$/;"	i
math	sbibm/tasks/two_moons/task.py	/^import math$/;"	i
math	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import math$/;"	i
math	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import math$/;"	i
math	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import math$/;"	i
matplotlib	sbibm/third_party/kgof/goftest.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	sbibm/third_party/kgof/intertst.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	sbibm/third_party/kgof/mmd.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	sbibm/third_party/kgof/plot.py	/^import matplotlib$/;"	i
matplotlib	sbibm/third_party/kgof/plot.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	sbibm/third_party/kgof/test/test_density.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	sbibm/third_party/kgof/test/test_goftest.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	sbibm/third_party/kgof/test/test_kernel.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	tests/metrics/test_fssd.py	/^import matplotlib$/;"	i
matplotlib	tests/metrics/test_fssd.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	tests/metrics/test_ksd.py	/^import matplotlib$/;"	i
matplotlib	tests/metrics/test_ksd.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	tests/metrics/utils.py	/^import matplotlib.pyplot as plt$/;"	i
matrix	sbibm/third_party/igms/main.py	/^    def matrix(self, i, j):$/;"	m	class:LazyKernel
matrix_inner_prod	sbibm/third_party/kgof/util.py	/^def matrix_inner_prod(A, B):$/;"	f
max_plate_nesting	sbibm/utils/pyro.py	/^        max_plate_nesting = _guess_max_plate_nesting(model, model_args, model_kwargs)$/;"	v
maybe_squeeze	sbibm/third_party/igms/main.py	/^def maybe_squeeze(X, dim):$/;"	f
mcabc	sbibm/algorithms/__init__.py	/^from sbibm.algorithms.sbi.mcabc import run as mcabc$/;"	i
mcabc	sbibm/algorithms/sbi/__init__.py	/^from sbibm.algorithms.sbi.mcabc import run as mcabc$/;"	i
mean	sbibm/third_party/igms/main.py	/^    def mean(self):$/;"	m	class:Matrix
mean_difference	sbibm/third_party/igms/main.py	/^def mean_difference(X, Y, squared=False):$/;"	f
meddistance	sbibm/metrics/ksd.py	/^from sbibm.third_party.kgof.util import meddistance$/;"	i
meddistance	sbibm/third_party/kgof/util.py	/^def meddistance(X, subsample=None, mean_on_fail=True):$/;"	f
median_distance	sbibm/metrics/__init__.py	/^from sbibm.metrics.ppc import median_distance  # noqa: F401$/;"	i
median_distance	sbibm/metrics/ppc.py	/^def median_distance($/;"	f
median_distance	sbibm/third_party/igms/main.py	/^def median_distance(Z):$/;"	f
median_distance	tests/metrics/test_ppc.py	/^from sbibm.metrics.ppc import median_distance$/;"	i
median_distance	tests/tasks/test_task_benchmarks.py	/^from sbibm.metrics.ppc import median_distance$/;"	i
merge_dicts	sbibm/third_party/kgof/util.py	/^def merge_dicts(*dict_args):$/;"	f
method_job_funcs	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^method_job_funcs = [$/;"	v
method_job_funcs	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^method_job_funcs = [$/;"	v
method_job_funcs	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^method_job_funcs = [$/;"	v
mgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
mgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
mmd	sbibm/metrics/__init__.py	/^from sbibm.metrics.mmd import mmd  # noqa: F401$/;"	i
mmd	sbibm/metrics/mmd.py	/^def mmd($/;"	f
mmd	tests/metrics/test_mmd.py	/^from sbibm.metrics import mmd$/;"	i
mmd2_biased	sbibm/third_party/igms/main.py	/^def mmd2_biased(K):$/;"	f
mmd2_u_stat	sbibm/third_party/igms/main.py	/^def mmd2_u_stat(K):$/;"	f
mmd2_u_stat_variance	sbibm/third_party/igms/main.py	/^def mmd2_u_stat_variance(K, inds=(0, 1)):$/;"	f
mmd2_unbiased	sbibm/third_party/igms/main.py	/^def mmd2_unbiased(K):$/;"	f
model	sbibm/utils/pyro.py	/^    model = poutine.enum($/;"	v
model_fn	sbibm/tasks/task.py	/^        def model_fn():$/;"	f	function:Task._get_pyro_model
model_trace	sbibm/utils/pyro.py	/^    model_trace = poutine.trace(model).get_trace(*model_args, **model_kwargs)$/;"	v
mst	sbibm/third_party/torch_two_sample/main.py	/^from scipy.sparse.csgraph import minimum_spanning_tree as mst$/;"	i
multiplier_M	tests/algorithms/test_baseline_rejection.py	/^        multiplier_M=multiplier_M,$/;"	v
multivariate_normal_density	sbibm/third_party/kgof/density.py	/^    def multivariate_normal_density(mean, cov, X):$/;"	m	class:GaussianMixture
mvn_kl_pq	sbibm/metrics/mvn_kl.py	/^def mvn_kl_pq($/;"	f
mvn_kl_qp	sbibm/metrics/mvn_kl.py	/^def mvn_kl_qp(X: torch.Tensor, Y: torch.Tensor, z_score: bool = True) -> torch.Tensor:$/;"	f
n	sbibm/third_party/igms/main.py	/^    def n(self, i):$/;"	m	class:LazyKernel
n	sbibm/third_party/kgof/data.py	/^    def n(self):$/;"	m	class:Data
name	setup.py	/^    name=NAME,$/;"	v
needed	sbibm/tasks/lotka_volterra/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
needed	sbibm/tasks/sir/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
nets	sbibm/utils/nflows.py	/^from nflows.nn import nets$/;"	i
neural_net	sbibm/utils/nflows.py	/^        neural_net = flows.Flow(transform, distribution, embedding)$/;"	v
nn	sbibm/algorithms/sbi/sl.py	/^import torch.nn as nn$/;"	i
nonhom_linear	sbibm/third_party/kgof/data.py	/^    def nonhom_linear(self, size):$/;"	m	class:DSISILogPoissonLinear
nonhom_linear	sbibm/third_party/kgof/data.py	/^    def nonhom_linear(self, size):$/;"	m	class:DSISIPoissonLinear
nonhom_sine	sbibm/third_party/kgof/data.py	/^    def nonhom_sine(self, size=1000):$/;"	m	class:DSISIPoissonSine
noqa	sbibm/metrics/__init__.py	/^from sbibm.metrics.c2st import c2st  # noqa: F401$/;"	i
noqa	sbibm/metrics/__init__.py	/^from sbibm.metrics.ksd import ksd  # noqa: F401$/;"	i
noqa	sbibm/metrics/__init__.py	/^from sbibm.metrics.mmd import mmd  # noqa: F401$/;"	i
noqa	sbibm/metrics/__init__.py	/^from sbibm.metrics.ppc import median_distance  # noqa: F401$/;"	i
noqa	sbibm/tasks/lotka_volterra/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
noqa	sbibm/tasks/sir/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
noqa	sbibm/utils/nflows.py	/^from tqdm import tqdm  # noqa$/;"	i
noqa	tests/algorithms/test_baseline_rejection.py	/^import pytest  # noqa$/;"	i
noref_tasks	tests/tasks/test_task_interface.py	/^noref_tasks = set([tn for tn in get_available_tasks() if "noref" in tn])$/;"	v
normal_density	sbibm/third_party/kgof/density.py	/^    def normal_density(mean, variance, X):$/;"	m	class:IsoGaussianMixture
np	sbibm/algorithms/elfi/bolfi.py	/^import numpy as np$/;"	i
np	sbibm/algorithms/elfi/utils/prior.py	/^import numpy as np$/;"	i
np	sbibm/algorithms/elfi/utils/wrapper.py	/^import numpy as np$/;"	i
np	sbibm/algorithms/pyabc/pyabc_utils.py	/^import numpy as np$/;"	i
np	sbibm/algorithms/pyabc/smcabc.py	/^import numpy as np$/;"	i
np	sbibm/algorithms/pyabcranger/abcrf.py	/^import numpy as np$/;"	i
np	sbibm/algorithms/pytorch/baseline_posterior.py	/^import numpy as np$/;"	i
np	sbibm/algorithms/sbi/utils.py	/^import numpy as np$/;"	i
np	sbibm/metrics/c2st.py	/^import numpy as np$/;"	i
np	sbibm/metrics/ksd.py	/^import numpy as np$/;"	i
np	sbibm/metrics/mmd.py	/^import numpy as np$/;"	i
np	sbibm/metrics/ppc.py	/^import numpy as np$/;"	i
np	sbibm/tasks/bernoulli_glm/task.py	/^import numpy as np$/;"	i
np	sbibm/tasks/gaussian_linear_uniform/task.py	/^import numpy as np$/;"	i
np	sbibm/tasks/slcp/task.py	/^        import numpy as np$/;"	i
np	sbibm/tasks/task.py	/^import numpy as np$/;"	i
np	sbibm/tasks/two_moons/task.py	/^import numpy as np$/;"	i
np	sbibm/third_party/igms/main.py	/^import numpy as np$/;"	i
np	sbibm/third_party/kgof/data.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/density.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/goftest.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/intertst.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/kernel.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/mmd.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/plot.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/test/test_density.py	/^import numpy as np$/;"	i
np	sbibm/third_party/kgof/test/test_goftest.py	/^import numpy as np$/;"	i
np	sbibm/third_party/kgof/test/test_kernel.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/kgof/util.py	/^import autograd.numpy as np$/;"	i
np	sbibm/third_party/torch_two_sample/main.py	/^import numpy as np$/;"	i
np	sbibm/utils/io.py	/^import numpy as np$/;"	i
np	sbibm/utils/nflows.py	/^import numpy as np$/;"	i
np	sbibm/utils/torch.py	/^import numpy as np$/;"	i
np	tests/metrics/test_fssd.py	/^import numpy as np$/;"	i
np	tests/metrics/test_ksd.py	/^import numpy as np$/;"	i
np	tests/metrics/test_ppc.py	/^import numpy as np$/;"	i
np	tests/metrics/utils.py	/^import numpy as np$/;"	i
ns	sbibm/third_party/igms/main.py	/^    def ns(self):$/;"	m	class:LazyKernel
num_batches_without_new_max	tests/algorithms/test_baseline_rejection.py	/^        num_batches_without_new_max=num_batches_without_new_max,$/;"	v
num_bins	sbibm/utils/nflows.py	/^                            num_bins=10,$/;"	v
num_blocks	sbibm/utils/nflows.py	/^                                num_blocks=2,$/;"	v
num_blocks	sbibm/utils/nflows.py	/^                            num_blocks=2,$/;"	v
num_blocks	sbibm/utils/nflows.py	/^            num_blocks=made_num_blocks,$/;"	v
num_examples	sbibm/utils/nflows.py	/^    num_examples = dataset.shape[0]$/;"	v
num_mixture_components	sbibm/utils/nflows.py	/^            num_mixture_components=made_num_mixture_components,$/;"	v
num_observation	tests/algorithms/sbi/test_abc_run_methods.py	/^        num_observation=3,$/;"	v
num_observation	tests/algorithms/test_baseline_posterior.py	/^        num_observation=num_observation$/;"	v
num_observation	tests/algorithms/test_baseline_posterior.py	/^        num_observation=num_observation,$/;"	v
num_observation	tests/algorithms/test_baseline_prior.py	/^        num_observation=num_observation,$/;"	v
num_observation	tests/algorithms/test_baseline_rejection.py	/^        num_observation=num_observation$/;"	v
num_observation	tests/algorithms/test_baseline_rejection.py	/^        num_observation=num_observation,$/;"	v
num_observation	tests/algorithms/test_baseline_sir.py	/^        num_observation=num_observation$/;"	v
num_observation	tests/algorithms/test_baseline_sir.py	/^        num_observation=num_observation,$/;"	v
num_samples	tests/algorithms/sbi/test_abc_run_methods.py	/^        num_samples=num_samples,$/;"	v
num_samples	tests/algorithms/test_baseline_posterior.py	/^        num_samples=num_samples,$/;"	v
num_samples	tests/algorithms/test_baseline_prior.py	/^        num_samples=num_samples,$/;"	v
num_samples	tests/algorithms/test_baseline_rejection.py	/^        num_samples=num_samples,$/;"	v
num_samples	tests/algorithms/test_baseline_sir.py	/^        num_samples=num_samples,$/;"	v
num_samples_plotting	tests/algorithms/test_baseline_rejection.py	/^    num_samples_plotting = 1000$/;"	v
num_samples_plotting	tests/algorithms/test_baseline_sir.py	/^    num_samples_plotting = 1000$/;"	v
num_simulations	sbibm/algorithms/sbi/utils.py	/^    def num_simulations(self):$/;"	m	class:SimulatorWrapper
num_simulations	tests/algorithms/sbi/test_abc_run_methods.py	/^        num_simulations=num_simulations,$/;"	v
num_simulations	tests/algorithms/test_baseline_rejection.py	/^        num_simulations=num_simulations,$/;"	v
num_simulations	tests/algorithms/test_baseline_sir.py	/^        num_simulations=num_simulations,$/;"	v
num_training_examples	sbibm/utils/nflows.py	/^    num_training_examples = int((1 - validation_fraction) * num_examples)$/;"	v
num_validation_examples	sbibm/utils/nflows.py	/^    num_validation_examples = num_examples - num_training_examples$/;"	v
numpy	sbibm/third_party/kgof/test/test_goftest.py	/^import numpy.testing as testing$/;"	i
numpy	sbibm/third_party/kgof/test/test_kernel.py	/^import numpy.testing as testing$/;"	i
numpy	sbibm/third_party/kgof/util.py	/^    import numpy$/;"	i
obj	sbibm/third_party/kgof/goftest.py	/^        def obj(V):$/;"	f	function:IMQFSSD.optimize_locs
obj	sbibm/third_party/kgof/goftest.py	/^        def obj(sqrt_gwidth, V):$/;"	f	function:GaussFSSD.optimize_locs_widths
obj	sbibm/third_party/kgof/goftest.py	/^        def obj(sqrt_neg_b, c, V):$/;"	f	function:IMQFSSD.optimize_locs_params
object	sbibm/third_party/kgof/data.py	/^from builtins import object, range$/;"	i
object	sbibm/third_party/kgof/density.py	/^from builtins import object, range$/;"	i
object	sbibm/third_party/kgof/goftest.py	/^from builtins import object, range, str, zip$/;"	i
object	sbibm/third_party/kgof/kernel.py	/^from builtins import object, str$/;"	i
object	sbibm/third_party/kgof/plot.py	/^from builtins import object, range$/;"	i
object	sbibm/third_party/kgof/util.py	/^from builtins import object$/;"	i
offdiag_col_sums	sbibm/third_party/igms/main.py	/^    def offdiag_col_sums(self):$/;"	m	class:SquareMatrix
offdiag_col_sums	sbibm/third_party/igms/main.py	/^    def offdiag_col_sums(self):$/;"	m	class:SymmetricMatrix
offdiag_col_sums_sq_sum	sbibm/third_party/igms/main.py	/^    def offdiag_col_sums_sq_sum(self):$/;"	m	class:SquareMatrix
offdiag_col_sums_sq_sum	sbibm/third_party/igms/main.py	/^    def offdiag_col_sums_sq_sum(self):$/;"	m	class:SymmetricMatrix
offdiag_mean	sbibm/third_party/igms/main.py	/^    def offdiag_mean(self):$/;"	m	class:SquareMatrix
offdiag_row_sums	sbibm/third_party/igms/main.py	/^    def offdiag_row_sums(self):$/;"	m	class:SquareMatrix
offdiag_row_sums_sq_sum	sbibm/third_party/igms/main.py	/^    def offdiag_row_sums_sq_sum(self):$/;"	m	class:SquareMatrix
offdiag_sq_sum	sbibm/third_party/igms/main.py	/^    def offdiag_sq_sum(self):$/;"	m	class:SquareMatrix
offdiag_sum	sbibm/third_party/igms/main.py	/^    def offdiag_sum(self):$/;"	m	class:SquareMatrix
offdiag_sums	sbibm/third_party/igms/main.py	/^    def offdiag_sums(self):$/;"	m	class:SymmetricMatrix
offdiag_sums_sq_sum	sbibm/third_party/igms/main.py	/^    def offdiag_sums_sq_sum(self):$/;"	m	class:SymmetricMatrix
old_div	sbibm/third_party/kgof/data.py	/^from past.utils import old_div$/;"	i
old_div	sbibm/third_party/kgof/density.py	/^from past.utils import old_div$/;"	i
old_div	sbibm/third_party/kgof/goftest.py	/^from past.utils import old_div$/;"	i
old_div	sbibm/third_party/kgof/kernel.py	/^from past.utils import old_div$/;"	i
old_div	sbibm/third_party/kgof/util.py	/^from past.utils import old_div$/;"	i
one_of_K_code	sbibm/third_party/kgof/util.py	/^def one_of_K_code(arr):$/;"	f
optim	sbibm/utils/nflows.py	/^from torch import optim$/;"	i
optimize_auto_init	sbibm/third_party/kgof/goftest.py	/^    def optimize_auto_init(p, dat, J, **ops):$/;"	m	class:GaussFSSD
optimize_locs	sbibm/third_party/kgof/goftest.py	/^    def optimize_locs($/;"	m	class:IMQFSSD
optimize_locs_params	sbibm/third_party/kgof/goftest.py	/^    def optimize_locs_params($/;"	m	class:IMQFSSD
optimize_locs_widths	sbibm/third_party/kgof/goftest.py	/^    def optimize_locs_widths($/;"	m	class:GaussFSSD
optimizer	sbibm/utils/nflows.py	/^    optimizer = optim.Adam(list(flow.parameters()), lr=learning_rate)$/;"	v
os	sbibm/algorithms/pyabc/smcabc.py	/^import os$/;"	i
os	sbibm/third_party/kgof/config.py	/^import os$/;"	i
os	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import os$/;"	i
os	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import os$/;"	i
os	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import os$/;"	i
os	sbibm/third_party/kgof/glo.py	/^import os$/;"	i
os	setup.py	/^import os$/;"	i
out_features	sbibm/utils/nflows.py	/^                                out_features=out_features,$/;"	v
outer_rows	sbibm/third_party/kgof/util.py	/^def outer_rows(X, Y):$/;"	f
packages	setup.py	/^    packages=find_packages(exclude=["tests", "*.tests", "*.tests.*", "tests.*"]),$/;"	v
pair_eval	sbibm/third_party/kgof/kernel.py	/^    def pair_eval(self, X, Y):$/;"	m	class:KDiagGauss
pair_eval	sbibm/third_party/kgof/kernel.py	/^    def pair_eval(self, X, Y):$/;"	m	class:KGauss
pair_eval	sbibm/third_party/kgof/kernel.py	/^    def pair_eval(self, X, Y):$/;"	m	class:KIMQ
pair_eval	sbibm/third_party/kgof/kernel.py	/^    def pair_eval(self, X, Y):$/;"	m	class:KMixGauss
pair_eval	sbibm/third_party/kgof/kernel.py	/^    def pair_eval(self, X, Y):$/;"	m	class:KMixture
pair_eval	sbibm/third_party/kgof/kernel.py	/^    def pair_eval(self, X, Y):$/;"	m	class:KPoly
pair_eval	sbibm/third_party/kgof/kernel.py	/^    def pair_eval(self, X, Y):$/;"	m	class:Kernel
pair_gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def pair_gradXY_sum(self, X, Y):$/;"	m	class:KGauss
pair_gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def pair_gradXY_sum(self, X, Y):$/;"	m	class:KMixture
pair_gradXY_sum	sbibm/third_party/kgof/kernel.py	/^    def pair_gradXY_sum(self, X, Y):$/;"	m	class:LinearKSTKernel
pair_gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def pair_gradX_Y(self, X, Y):$/;"	m	class:KGauss
pair_gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def pair_gradX_Y(self, X, Y):$/;"	m	class:KMixture
pair_gradX_Y	sbibm/third_party/kgof/kernel.py	/^    def pair_gradX_Y(self, X, Y):$/;"	m	class:LinearKSTKernel
pair_gradY_X	sbibm/third_party/kgof/kernel.py	/^    def pair_gradY_X(self, X, Y):$/;"	m	class:KGauss
pair_gradY_X	sbibm/third_party/kgof/kernel.py	/^    def pair_gradY_X(self, X, Y):$/;"	m	class:KMixture
pair_gradY_X	sbibm/third_party/kgof/kernel.py	/^    def pair_gradY_X(self, X, Y):$/;"	m	class:LinearKSTKernel
pairplot	sbibm/utils/tensorboard.py	/^from sbi.utils.plot import pairplot$/;"	i
pairplot	tests/algorithms/test_baseline_rejection.py	/^from sbi.utils.plot import pairplot$/;"	i
pairplot	tests/algorithms/test_baseline_sir.py	/^from sbi.utils.plot import pairplot$/;"	i
pairplot	tests/metrics/utils.py	/^from sbi.utils.plot import pairplot$/;"	i
part	sbibm/third_party/igms/main.py	/^    def part(self, i):$/;"	m	class:LazyKernel
partial	sbibm/utils/pyro.py	/^from functools import partial$/;"	i
parts	sbibm/third_party/igms/main.py	/^    def parts(self):$/;"	m	class:LazyKernel
path	sbibm/tasks/lotka_volterra/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
path	sbibm/tasks/sir/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
pd	sbibm/algorithms/sbi/smcabc.py	/^import pandas as pd$/;"	i
pd	sbibm/tasks/task.py	/^import pandas as pd$/;"	i
pd	sbibm/utils/io.py	/^import pandas as pd$/;"	i
pd	sbibm/visualisation/correlation.py	/^import pandas as pd$/;"	i
pd	sbibm/visualisation/metric.py	/^import pandas as pd$/;"	i
pdb	sbibm/utils/debug.py	/^            import ipdb as pdb$/;"	i
pdb	sbibm/utils/debug.py	/^            import pdb$/;"	i
pdb	sbibm/utils/debug.py	/^        import ipdb as pdb$/;"	i
pdb	sbibm/utils/debug.py	/^        import pdb$/;"	i
pdb_hook	sbibm/utils/debug.py	/^def pdb_hook(type, value, tb):$/;"	f
pdb_hook_always	sbibm/utils/debug.py	/^def pdb_hook_always(type, value, tb):$/;"	f
pdist	sbibm/tasks/bernoulli_glm/task.py	/^import pyro.distributions as pdist$/;"	i
pdist	sbibm/tasks/gaussian_linear/task.py	/^from pyro import distributions as pdist$/;"	i
pdist	sbibm/tasks/gaussian_linear_uniform/task.py	/^from pyro import distributions as pdist$/;"	i
pdist	sbibm/tasks/gaussian_mixture/task.py	/^from pyro import distributions as pdist$/;"	i
pdist	sbibm/tasks/lotka_volterra/task.py	/^from pyro import distributions as pdist$/;"	i
pdist	sbibm/tasks/sir/task.py	/^from pyro import distributions as pdist$/;"	i
pdist	sbibm/tasks/slcp/task.py	/^from pyro import distributions as pdist$/;"	i
pdist	sbibm/tasks/two_moons/task.py	/^from pyro import distributions as pdist$/;"	i
pdist	sbibm/third_party/torch_two_sample/main.py	/^def pdist(sample_1, sample_2, norm=2, eps=1e-5):$/;"	f
perform_test	sbibm/third_party/kgof/goftest.py	/^    def perform_test(self, dat):$/;"	m	class:GofTest
perform_test	sbibm/third_party/kgof/goftest.py	/^    def perform_test(self, dat):$/;"	m	class:LinearKernelSteinTest
perform_test	sbibm/third_party/kgof/goftest.py	/^    def perform_test(self, dat, return_simulated_stats=False):$/;"	m	class:FSSD
perform_test	sbibm/third_party/kgof/goftest.py	/^    def perform_test(self, dat, return_simulated_stats=False, return_ustat_gram=False):$/;"	m	class:KernelSteinTest
perform_test	sbibm/third_party/kgof/intertst.py	/^    def perform_test(self, dat):$/;"	m	class:GaussMETest
perform_test	sbibm/third_party/kgof/intertst.py	/^    def perform_test(self, dat, op=None, return_metest=False):$/;"	m	class:GaussMETestOpt
perform_test	sbibm/third_party/kgof/mmd.py	/^    def perform_test($/;"	m	class:QuadMMDGofOpt
perform_test	sbibm/third_party/kgof/mmd.py	/^    def perform_test(self, dat):$/;"	m	class:QuadMMDGof
permuted_indices	sbibm/utils/nflows.py	/^    permuted_indices = torch.randperm(num_examples)$/;"	v
pickle	sbibm/third_party/kgof/glo.py	/^import pickle$/;"	i
pickle_load	sbibm/third_party/kgof/glo.py	/^def pickle_load(fpath):$/;"	f
plot_blobs_different	tests/metrics/utils.py	/^def plot_blobs_different():$/;"	f
plot_blobs_same	tests/metrics/utils.py	/^def plot_blobs_same():$/;"	f
plot_prob_reject	sbibm/third_party/kgof/plot.py	/^def plot_prob_reject($/;"	f
plot_runtime	sbibm/third_party/kgof/plot.py	/^def plot_runtime(ex, fname, func_xvalues, xlabel, func_title=None):$/;"	f
plt	sbibm/algorithms/pyro/utils/tensorboard.py	/^from matplotlib import pyplot as plt$/;"	i
plt	sbibm/third_party/kgof/goftest.py	/^import matplotlib.pyplot as plt$/;"	i
plt	sbibm/third_party/kgof/intertst.py	/^import matplotlib.pyplot as plt$/;"	i
plt	sbibm/third_party/kgof/mmd.py	/^import matplotlib.pyplot as plt$/;"	i
plt	sbibm/third_party/kgof/plot.py	/^import matplotlib.pyplot as plt$/;"	i
plt	sbibm/third_party/kgof/test/test_density.py	/^import matplotlib.pyplot as plt$/;"	i
plt	sbibm/third_party/kgof/test/test_goftest.py	/^import matplotlib.pyplot as plt$/;"	i
plt	sbibm/third_party/kgof/test/test_kernel.py	/^import matplotlib.pyplot as plt$/;"	i
plt	tests/metrics/test_fssd.py	/^import matplotlib.pyplot as plt$/;"	i
plt	tests/metrics/test_ksd.py	/^import matplotlib.pyplot as plt$/;"	i
plt	tests/metrics/utils.py	/^import matplotlib.pyplot as plt$/;"	i
posterior_mean_error	sbibm/metrics/__init__.py	/^from sbibm.metrics.moments import posterior_mean_error, posterior_variance_ratio$/;"	i
posterior_mean_error	sbibm/metrics/moments.py	/^def posterior_mean_error($/;"	f
posterior_mean_error	tests/metrics/test_moments.py	/^from sbibm.metrics import posterior_mean_error, posterior_variance_ratio$/;"	i
posterior_nn	sbibm/algorithms/sbi/snpe.py	/^from sbi.utils.get_nn_models import posterior_nn$/;"	i
posterior_variance_ratio	sbibm/metrics/__init__.py	/^from sbibm.metrics.moments import posterior_mean_error, posterior_variance_ratio$/;"	i
posterior_variance_ratio	sbibm/metrics/moments.py	/^def posterior_variance_ratio($/;"	f
posterior_variance_ratio	tests/metrics/test_moments.py	/^from sbibm.metrics import posterior_mean_error, posterior_variance_ratio$/;"	i
poutine	sbibm/utils/pyro.py	/^from pyro import poutine as poutine$/;"	i
power_criterion	sbibm/third_party/kgof/goftest.py	/^    def power_criterion($/;"	m	class:FSSD
power_criterion	sbibm/third_party/kgof/goftest.py	/^    def power_criterion(p, dat, b, c, test_locs, reg=1e-2):$/;"	m	class:IMQFSSD
power_criterion	sbibm/third_party/kgof/goftest.py	/^    def power_criterion(p, dat, gwidth, test_locs, reg=1e-2, use_2terms=False):$/;"	m	class:GaussFSSD
pprint	sbibm/third_party/kgof/util.py	/^    from pprint import pprint$/;"	i
print_function	sbibm/third_party/kgof/data.py	/^from __future__ import division, print_function$/;"	i
print_function	sbibm/third_party/kgof/util.py	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
prior	sbibm/tasks/bernoulli_glm/task.py	/^        def prior(num_samples=1):$/;"	f	function:BernoulliGLM.get_prior
prior	sbibm/tasks/gaussian_linear/task.py	/^        def prior(num_samples=1):$/;"	f	function:GaussianLinear.get_prior
prior	sbibm/tasks/gaussian_linear_uniform/task.py	/^        def prior(num_samples=1):$/;"	f	function:GaussianLinearUniform.get_prior
prior	sbibm/tasks/gaussian_mixture/task.py	/^        def prior(num_samples=1):$/;"	f	function:GaussianMixture.get_prior
prior	sbibm/tasks/lotka_volterra/task.py	/^        def prior(num_samples=1):$/;"	f	function:LotkaVolterra.get_prior
prior	sbibm/tasks/sir/task.py	/^        def prior(num_samples=1):$/;"	f	function:SIR.get_prior
prior	sbibm/tasks/slcp/task.py	/^        def prior(num_samples=1):$/;"	f	function:SLCP.get_prior
prior	sbibm/tasks/two_moons/task.py	/^        def prior(num_samples=1):$/;"	f	function:TwoMoons.get_prior
prior_weight	tests/algorithms/test_baseline_rejection.py	/^        prior_weight=prior_weight,$/;"	v
prior_weight	tests/algorithms/test_baseline_sir.py	/^        prior_weight=prior_weight,$/;"	v
project_slug	setup.py	/^project_slug = NAME.lower().replace("-", "_").replace(" ", "_")$/;"	v
proposal_dist	tests/algorithms/test_baseline_rejection.py	/^        proposal_dist=proposal_dist,$/;"	v
proposal_dist	tests/algorithms/test_baseline_rejection.py	/^    proposal_dist = get_proposal($/;"	v
proposal_dist	tests/algorithms/test_baseline_sir.py	/^        proposal_dist=proposal_dist,$/;"	v
proposal_dist	tests/algorithms/test_baseline_sir.py	/^    proposal_dist = get_proposal($/;"	v
pyabc	sbibm/algorithms/pyabc/pyabc_utils.py	/^import pyabc$/;"	i
pyabc	sbibm/algorithms/pyabc/smcabc.py	/^import pyabc$/;"	i
pyabcranger	sbibm/algorithms/pyabcranger/abcrf.py	/^import pyabcranger$/;"	i
pyro	sbibm/tasks/bernoulli_glm/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/bernoulli_glm/task.py	/^import pyro.distributions as pdist$/;"	i
pyro	sbibm/tasks/gaussian_linear/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/gaussian_linear_uniform/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/gaussian_mixture/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/lotka_volterra/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/sir/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/slcp/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/task.py	/^import pyro$/;"	i
pyro	sbibm/tasks/two_moons/task.py	/^import pyro$/;"	i
pyro	sbibm/utils/pyro.py	/^import pyro$/;"	i
pyro	tests/metrics/test_fssd.py	/^import pyro$/;"	i
pyro	tests/metrics/test_ksd.py	/^import pyro$/;"	i
pyro	tests/tasks/test_task_benchmarks.py	/^import pyro$/;"	i
pyro	tests/tasks/test_task_interface.py	/^import pyro$/;"	i
pyro	tests/tasks/test_task_rej_abc_demo.py	/^import pyro$/;"	i
pyro	tests/tasks/two_moons/test_task.py	/^import pyro$/;"	i
pytest	tests/algorithms/sbi/test_abc_run_methods.py	/^import pytest$/;"	i
pytest	tests/algorithms/sbi/test_snle_posterior.py	/^import pytest$/;"	i
pytest	tests/algorithms/sbi/test_snpe_posterior.py	/^import pytest$/;"	i
pytest	tests/algorithms/sbi/test_snre_posterior.py	/^import pytest$/;"	i
pytest	tests/algorithms/test_baseline_posterior.py	/^import pytest$/;"	i
pytest	tests/algorithms/test_baseline_prior.py	/^import pytest$/;"	i
pytest	tests/algorithms/test_baseline_rejection.py	/^import pytest  # noqa$/;"	i
pytest	tests/algorithms/test_baseline_sir.py	/^import pytest$/;"	i
pytest	tests/tasks/test_task_benchmarks.py	/^import pytest$/;"	i
pytest	tests/tasks/test_task_interface.py	/^import pytest$/;"	i
pytest	tests/tasks/test_task_rej_abc_demo.py	/^import pytest$/;"	i
pytest	tests/tasks/two_moons/test_task.py	/^import pytest$/;"	i
pytest	tests/utils/test_pyro.py	/^import pytest$/;"	i
python_requires	setup.py	/^    python_requires=REQUIRES_PYTHON,$/;"	v
quadratic_intensity	sbibm/third_party/kgof/data.py	/^    def quadratic_intensity(self, X):$/;"	m	class:DSISIPoisson2D
quadratic_intensity	sbibm/third_party/kgof/data.py	/^    def quadratic_intensity(self, X):$/;"	m	class:DSISISigmoidPoisson2D
quadratic_intensity	sbibm/third_party/kgof/density.py	/^    def quadratic_intensity(self, X, Y):$/;"	m	class:ISIPoisson2D
quadratic_intensity	sbibm/third_party/kgof/density.py	/^    def quadratic_intensity(self, s, t):$/;"	m	class:ISISigmoidPoisson2D
randn	sbibm/third_party/kgof/util.py	/^def randn(m, n, seed=3):$/;"	f
random	sbibm/algorithms/pyabc/smcabc.py	/^import random$/;"	i
random_mask	sbibm/utils/nflows.py	/^                            random_mask=False,$/;"	v
random_mask	sbibm/utils/nflows.py	/^            random_mask=False,$/;"	v
range	sbibm/third_party/kgof/data.py	/^from builtins import object, range$/;"	i
range	sbibm/third_party/kgof/density.py	/^from builtins import object, range$/;"	i
range	sbibm/third_party/kgof/goftest.py	/^from builtins import object, range, str, zip$/;"	i
range	sbibm/third_party/kgof/plot.py	/^from builtins import object, range$/;"	i
range	sbibm/third_party/kgof/util.py	/^from builtins import int, range, zip$/;"	i
re	tests/tasks/test_task_benchmarks.py	/^import re$/;"	i
re	tests/tasks/test_task_interface.py	/^import re$/;"	i
re	tests/tasks/test_task_rej_abc_demo.py	/^import re$/;"	i
reference_samples	tests/algorithms/test_baseline_posterior.py	/^    reference_samples = task.get_reference_posterior_samples($/;"	v
reference_samples	tests/algorithms/test_baseline_rejection.py	/^    reference_samples = task.get_reference_posterior_samples($/;"	v
reference_samples	tests/algorithms/test_baseline_sir.py	/^    reference_samples = task.get_reference_posterior_samples($/;"	v
regression_model	sbibm/algorithms/sbi/utils.py	/^        regression_model = LinearRegression(fit_intercept=True)$/;"	v
rej_abc	sbibm/algorithms/__init__.py	/^rej_abc = mcabc$/;"	v
rej_abc	tests/tasks/test_task_rej_abc_demo.py	/^from sbibm.algorithms import rej_abc$/;"	i
rej_accessor	sbibm/third_party/kgof/plot.py	/^    def rej_accessor(jr):$/;"	f	function:plot_prob_reject
rej_sample	sbibm/third_party/kgof/data.py	/^    def rej_sample(self, X, llh, func=None):$/;"	m	class:DSPoisson2D
relu	sbibm/third_party/torch_two_sample/main.py	/^from torch.nn.functional import relu, softmax$/;"	i
reps	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^reps = 200$/;"	v
reps	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^reps = 200$/;"	v
reps	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^reps = 300$/;"	v
rerun	tests/algorithms/test_baseline_posterior.py	/^        rerun=True,$/;"	v
result_folder	sbibm/third_party/kgof/glo.py	/^def result_folder():$/;"	f
rmtree	setup.py	/^from shutil import rmtree$/;"	i
row_sums	sbibm/third_party/igms/main.py	/^    def row_sums(self):$/;"	m	class:Matrix
row_sums_sq_sum	sbibm/third_party/igms/main.py	/^    def row_sums_sq_sum(self):$/;"	m	class:Matrix
run	sbibm/algorithms/elfi/bolfi.py	/^def run($/;"	f
run	sbibm/algorithms/pyabc/smcabc.py	/^def run($/;"	f
run	sbibm/algorithms/pyabcranger/abcrf.py	/^def run($/;"	f
run	sbibm/algorithms/pyro/mcmc.py	/^def run($/;"	f
run	sbibm/algorithms/pytorch/baseline_grid.py	/^def run($/;"	f
run	sbibm/algorithms/pytorch/baseline_posterior.py	/^def run($/;"	f
run	sbibm/algorithms/pytorch/baseline_prior.py	/^def run($/;"	f
run	sbibm/algorithms/pytorch/baseline_rejection.py	/^def run($/;"	f
run	sbibm/algorithms/pytorch/baseline_runtime.py	/^def run($/;"	f
run	sbibm/algorithms/pytorch/baseline_sir.py	/^def run($/;"	f
run	sbibm/algorithms/sbi/mcabc.py	/^def run($/;"	f
run	sbibm/algorithms/sbi/sl.py	/^def run($/;"	f
run	sbibm/algorithms/sbi/smcabc.py	/^def run($/;"	f
run	sbibm/algorithms/sbi/snle.py	/^def run($/;"	f
run	sbibm/algorithms/sbi/snpe.py	/^def run($/;"	f
run	sbibm/algorithms/sbi/snre.py	/^def run($/;"	f
run	sbibm/tasks/task.py	/^        def run(num_observation, observation_seed, **kwargs):$/;"	f	function:Task._setup
run	setup.py	/^    def run(self):$/;"	m	class:UploadCommand
run	tests/algorithms/test_baseline_rejection.py	/^from sbibm.algorithms.pytorch.baseline_rejection import run$/;"	i
run	tests/algorithms/test_baseline_sir.py	/^from sbibm.algorithms.pytorch.baseline_sir import run$/;"	i
run	tests/tasks/test_task_benchmarks.py	/^from sbibm.algorithms.sbi.snpe import run$/;"	i
run_lra	sbibm/algorithms/pyabc/smcabc.py	/^from sbibm.algorithms.sbi.utils import clip_int, get_sass_transform, run_lra$/;"	i
run_lra	sbibm/algorithms/sbi/utils.py	/^def run_lra($/;"	f
run_mcabc	tests/algorithms/sbi/test_abc_run_methods.py	/^from sbibm.algorithms.sbi.mcabc import run as run_mcabc$/;"	i
run_mcmc	sbibm/tasks/lotka_volterra/task.py	/^        from sbibm.algorithms.pyro.mcmc import run as run_mcmc$/;"	i
run_mcmc	sbibm/tasks/sir/task.py	/^        from sbibm.algorithms.pyro.mcmc import run as run_mcmc$/;"	i
run_posterior	tests/algorithms/sbi/test_snle_posterior.py	/^from sbibm.algorithms.sbi.snle import run as run_posterior$/;"	i
run_posterior	tests/algorithms/sbi/test_snpe_posterior.py	/^from sbibm.algorithms.sbi.snpe import run as run_posterior$/;"	i
run_posterior	tests/algorithms/sbi/test_snre_posterior.py	/^from sbibm.algorithms.sbi.snre import run as run_posterior$/;"	i
run_posterior	tests/algorithms/test_baseline_posterior.py	/^from sbibm.algorithms.pytorch.baseline_posterior import run as run_posterior$/;"	i
run_prior	tests/algorithms/test_baseline_prior.py	/^from sbibm.algorithms.pytorch.baseline_prior import run as run_prior$/;"	i
run_problem	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^def run_problem(prob_label):$/;"	f
run_problem	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^def run_problem(prob_label):$/;"	f
run_problem	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^def run_problem(prob_label):$/;"	f
run_pyabc	sbibm/algorithms/pyabc/pyabc_utils.py	/^def run_pyabc($/;"	f
run_rejection	sbibm/tasks/lotka_volterra/task.py	/^        from sbibm.algorithms.pytorch.baseline_rejection import run as run_rejection$/;"	i
run_rejection	sbibm/tasks/sir/task.py	/^        from sbibm.algorithms.pytorch.baseline_rejection import run as run_rejection$/;"	i
run_rejection	sbibm/tasks/slcp/task.py	/^        from sbibm.algorithms.pytorch.baseline_rejection import run as run_rejection$/;"	i
run_rejection_abc	sbibm/algorithms/pyabc/pyabc_utils.py	/^def run_rejection_abc($/;"	f
run_sir	sbibm/tasks/slcp/task.py	/^        from sbibm.algorithms.pytorch.baseline_sir import run as run_sir$/;"	i
run_smcabc	tests/algorithms/sbi/test_abc_run_methods.py	/^from sbibm.algorithms.sbi.smcabc import run as run_smcabc$/;"	i
sample	sbibm/algorithms/pytorch/utils/proposal.py	/^    def sample(self, num_samples):$/;"	m	class:DenfensiveProposal
sample	sbibm/algorithms/sbi/sl.py	/^    def sample(self, *args, **kwargs):$/;"	m	class:SynthLikNet
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed):$/;"	m	class:DataSource
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=2):$/;"	m	class:DSIsotropicNormal
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=29):$/;"	m	class:DSGaussianMixture
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=29):$/;"	m	class:DSIsoGaussianMixture
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSGamma
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSISILogPoissonLinear
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSISIPoisson2D
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSISIPoissonLinear
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSISIPoissonSine
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSISISigmoidPoisson2D
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSLogGamma
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSNormal
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3):$/;"	m	class:DSPoisson2D
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=3, return_latent=False):$/;"	m	class:DSGaussBernRBM
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=4):$/;"	m	class:DSLaplace
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=5):$/;"	m	class:DSTDistribution
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=872):$/;"	m	class:DSGaussCosFreqs
sample	sbibm/third_party/kgof/data.py	/^    def sample(self, n, seed=900, return_ind=False):$/;"	m	class:DSResample
sample	sbibm/utils/nflows.py	/^    def sample(self, *args, **kwargs):$/;"	m	class:FlowWrapper
sample	sbibm/utils/torch.py	/^def sample($/;"	f
sample	sbibm/visualisation/posterior.py	/^from sbibm.utils.torch import sample$/;"	i
sample_blobs_different	tests/metrics/utils.py	/^def sample_blobs_different($/;"	f
sample_blobs_same	tests/metrics/test_c2st.py	/^from .utils import sample_blobs_same$/;"	i
sample_blobs_same	tests/metrics/test_mmd.py	/^from .utils import sample_blobs_same$/;"	i
sample_blobs_same	tests/metrics/utils.py	/^def sample_blobs_same($/;"	f
sample_prior	sbibm/algorithms/pytorch/utils/proposal.py	/^    def sample_prior(self, num_samples):$/;"	m	class:DenfensiveProposal
sample_proposal	sbibm/algorithms/pytorch/utils/proposal.py	/^    def sample_proposal(self, num_samples):$/;"	m	class:DenfensiveProposal
sample_size	sbibm/third_party/kgof/data.py	/^    def sample_size(self):$/;"	m	class:Data
sample_size	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^sample_size = 1000$/;"	v
sample_size	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^sample_size = 500$/;"	v
sample_weight	sbibm/algorithms/sbi/utils.py	/^            sample_weight=sample_weight,$/;"	v
sample_with_weights	sbibm/algorithms/pyabc/smcabc.py	/^from sbibm.utils.torch import sample_with_weights$/;"	i
sample_with_weights	sbibm/algorithms/pyabcranger/abcrf.py	/^from sbibm.utils.torch import sample_with_weights$/;"	i
sample_with_weights	sbibm/utils/torch.py	/^def sample_with_weights($/;"	f
sampler	sbibm/utils/nflows.py	/^        sampler=SubsetRandomSampler(train_indices),$/;"	v
sampler	sbibm/utils/nflows.py	/^        sampler=SubsetRandomSampler(val_indices),$/;"	v
samples	tests/algorithms/test_baseline_posterior.py	/^    samples = run_posterior($/;"	v
samples	tests/algorithms/test_baseline_prior.py	/^    samples = run_prior($/;"	v
samples	tests/algorithms/test_baseline_rejection.py	/^        samples=reference_samples,$/;"	v
samples	tests/algorithms/test_baseline_rejection.py	/^    samples = run($/;"	v
samples	tests/algorithms/test_baseline_sir.py	/^        samples=reference_samples,$/;"	v
samples	tests/algorithms/test_baseline_sir.py	/^    samples = run($/;"	v
save_data	sbibm/tasks/task.py	/^    def save_data(self, path: Union[str, Path], data: torch.Tensor):$/;"	m	class:Task
save_float_to_csv	sbibm/utils/io.py	/^def save_float_to_csv($/;"	f
save_parameters	sbibm/tasks/task.py	/^    def save_parameters(self, path: Union[str, Path], parameters: torch.Tensor):$/;"	m	class:Task
save_tensor_to_csv	sbibm/algorithms/sbi/mcabc.py	/^from sbibm.utils.io import save_tensor_to_csv$/;"	i
save_tensor_to_csv	sbibm/tasks/slcp/task.py	/^from sbibm.utils.io import get_tensor_from_csv, save_tensor_to_csv$/;"	i
save_tensor_to_csv	sbibm/tasks/task.py	/^from sbibm.utils.io import get_tensor_from_csv, save_tensor_to_csv$/;"	i
save_tensor_to_csv	sbibm/utils/io.py	/^def save_tensor_to_csv($/;"	f
sbibm	sbibm/algorithms/pyabc/pyabc_utils.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pyabc/smcabc.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pyabcranger/abcrf.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pyro/mcmc.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pytorch/baseline_grid.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pytorch/baseline_posterior.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pytorch/baseline_prior.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pytorch/baseline_rejection.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pytorch/baseline_sir.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/pytorch/utils/proposal.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/sbi/mcabc.py	/^import sbibm$/;"	i
sbibm	sbibm/algorithms/sbi/smcabc.py	/^import sbibm$/;"	i
sbibm	sbibm/tasks/lotka_volterra/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
sbibm	sbibm/tasks/sir/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
sbibm	sbibm/tasks/two_moons/task.py	/^import sbibm$/;"	i
sbibm	sbibm/third_party/kgof/config.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/data.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof as kgof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof as kgof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof as kgof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/glo.py	/^    import sbibm.third_party.kgof.config as config$/;"	i
sbibm	sbibm/third_party/kgof/glo.py	/^import sbibm.third_party.kgof as kgof$/;"	i
sbibm	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.config as config$/;"	i
sbibm	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/plot.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
sbibm	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	sbibm/visualisation/posterior.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/sbi/test_abc_run_methods.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/sbi/test_snle_posterior.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/sbi/test_snpe_posterior.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/sbi/test_snre_posterior.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/test_baseline_posterior.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/test_baseline_prior.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/test_baseline_rejection.py	/^import sbibm$/;"	i
sbibm	tests/algorithms/test_baseline_sir.py	/^import sbibm$/;"	i
sbibm	tests/metrics/test_fssd.py	/^import sbibm$/;"	i
sbibm	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof as kgof$/;"	i
sbibm	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	tests/metrics/test_ksd.py	/^import sbibm$/;"	i
sbibm	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof$/;"	i
sbibm	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
sbibm	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
sbibm	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
sbibm	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
sbibm	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
sbibm	tests/utils/test_pyro.py	/^import sbibm$/;"	i
scipy	sbibm/third_party/kgof/data.py	/^import scipy.stats as stats$/;"	i
scipy	sbibm/third_party/kgof/density.py	/^import scipy.stats as stats$/;"	i
scipy	sbibm/third_party/kgof/goftest.py	/^import scipy$/;"	i
scipy	sbibm/third_party/kgof/goftest.py	/^import scipy.stats as stats$/;"	i
scipy	sbibm/third_party/kgof/intertst.py	/^import scipy$/;"	i
scipy	sbibm/third_party/kgof/intertst.py	/^import scipy.stats as stats$/;"	i
scipy	sbibm/third_party/kgof/mmd.py	/^import scipy$/;"	i
scipy	sbibm/third_party/kgof/mmd.py	/^import scipy.stats as stats$/;"	i
scipy	sbibm/third_party/kgof/test/test_density.py	/^import scipy.stats as stats$/;"	i
scipy	sbibm/third_party/kgof/test/test_goftest.py	/^import scipy.stats as stats$/;"	i
scipy	sbibm/third_party/kgof/test/test_kernel.py	/^import scipy.stats as stats$/;"	i
scipy	tests/metrics/test_fssd.py	/^import scipy.stats as stats$/;"	i
scipy	tests/metrics/test_ksd.py	/^import scipy.stats as stats$/;"	i
search_time	sbibm/third_party/kgof/data.py	/^    def search_time(self, x):$/;"	m	class:DSISIPoissonSine
setUp	sbibm/third_party/kgof/test/test_density.py	/^    def setUp(self):$/;"	m	class:TestIsotropicNormal
setUp	sbibm/third_party/kgof/test/test_goftest.py	/^    def setUp(self):$/;"	m	class:TestFSSD
setUp	sbibm/third_party/kgof/test/test_kernel.py	/^    def setUp(self):$/;"	m	class:TestKGauss
set_default_matplotlib_options	sbibm/third_party/kgof/plot.py	/^def set_default_matplotlib_options():$/;"	f
setting	sbibm/tasks/lotka_volterra/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
setting	sbibm/tasks/sir/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
setup	setup.py	/^from setuptools import Command, find_packages, setup$/;"	i
shared_intermediates	sbibm/utils/pyro.py	/^from opt_einsum import shared_intermediates$/;"	i
shuffle	sbibm/utils/nflows.py	/^        shuffle=False,$/;"	v
shutil	sbibm/utils/tensorboard.py	/^import shutil$/;"	i
sigmoid	sbibm/third_party/kgof/data.py	/^    def sigmoid(x):$/;"	m	class:DSGaussBernRBM
sigmoid	sbibm/third_party/kgof/density.py	/^    def sigmoid(self, x):$/;"	m	class:ISISigmoidPoisson2D
simulate	sbibm/third_party/kgof/goftest.py	/^    def simulate(self, gof, dat):$/;"	m	class:H0Simulator
simulate	sbibm/third_party/kgof/goftest.py	/^    def simulate(self, gof, dat, fea_tensor=None):$/;"	m	class:FSSDH0SimCovDraw
simulate	sbibm/third_party/kgof/goftest.py	/^    def simulate(self, gof, dat, fea_tensor=None):$/;"	m	class:FSSDH0SimCovObs
simulate_in_batches	sbibm/algorithms/pyabcranger/abcrf.py	/^from sbi.simulators.simutils import simulate_in_batches$/;"	i
simulate_null_dist	sbibm/third_party/kgof/goftest.py	/^    def simulate_null_dist(eigs, J, n_simulate=2000, seed=7):$/;"	m	class:FSSD
simulator	sbibm/tasks/bernoulli_glm/task.py	/^        def simulator($/;"	f	function:BernoulliGLM.get_simulator
simulator	sbibm/tasks/gaussian_linear/task.py	/^        def simulator(parameters):$/;"	f	function:GaussianLinear.get_simulator
simulator	sbibm/tasks/gaussian_linear_uniform/task.py	/^        def simulator(parameters):$/;"	f	function:GaussianLinearUniform.get_simulator
simulator	sbibm/tasks/gaussian_mixture/task.py	/^        def simulator(parameters):$/;"	f	function:GaussianMixture.get_simulator
simulator	sbibm/tasks/lotka_volterra/task.py	/^        def simulator(parameters):$/;"	f	function:LotkaVolterra.get_simulator
simulator	sbibm/tasks/sir/task.py	/^        def simulator(parameters):$/;"	f	function:SIR.get_simulator
simulator	sbibm/tasks/slcp/task.py	/^        def simulator(parameters):$/;"	f	function:SLCP.get_simulator
simulator	sbibm/tasks/two_moons/task.py	/^        def simulator(parameters):$/;"	f	function:TwoMoons.get_simulator
sine_intensity	sbibm/third_party/kgof/data.py	/^    def sine_intensity(self, X):$/;"	m	class:DSISIPoisson2D
sine_intensity	sbibm/third_party/kgof/data.py	/^    def sine_intensity(self, X):$/;"	m	class:DSISISigmoidPoisson2D
smc_abc	sbibm/algorithms/__init__.py	/^smc_abc = smcabc$/;"	v
smcabc	sbibm/algorithms/__init__.py	/^from sbibm.algorithms.sbi.smcabc import run as smcabc$/;"	i
smcabc	sbibm/algorithms/sbi/__init__.py	/^from sbibm.algorithms.sbi.smcabc import run as smcabc$/;"	i
snle	sbibm/algorithms/__init__.py	/^from sbibm.algorithms.sbi.snle import run as snle$/;"	i
snle	sbibm/algorithms/sbi/__init__.py	/^from sbibm.algorithms.sbi.snle import run as snle$/;"	i
snpe	sbibm/algorithms/__init__.py	/^from sbibm.algorithms.sbi.snpe import run as snpe$/;"	i
snpe	sbibm/algorithms/sbi/__init__.py	/^from sbibm.algorithms.sbi.snpe import run as snpe$/;"	i
snre	sbibm/algorithms/__init__.py	/^from sbibm.algorithms.sbi.snre import run as snre$/;"	i
snre	sbibm/algorithms/sbi/__init__.py	/^from sbibm.algorithms.sbi.snre import run as snre$/;"	i
softmax	sbibm/third_party/torch_two_sample/main.py	/^from torch.nn.functional import relu, softmax$/;"	i
split_tr_te	sbibm/third_party/kgof/data.py	/^    def split_tr_te(self, tr_proportion=0.5, seed=820, return_tr_ind=False):$/;"	m	class:Data
sq_sum	sbibm/third_party/igms/main.py	/^    def sq_sum(self):$/;"	m	class:Matrix
sq_trace	sbibm/third_party/igms/main.py	/^    def sq_trace(self):$/;"	m	class:ConstDiagMatrix
sq_trace	sbibm/third_party/igms/main.py	/^    def sq_trace(self):$/;"	m	class:SquareMatrix
standard_library	sbibm/third_party/kgof/glo.py	/^from future import standard_library$/;"	i
standard_library	sbibm/third_party/kgof/util.py	/^from future import standard_library$/;"	i
standardize	sbibm/third_party/kgof/util.py	/^def standardize(X):$/;"	f
standardizing_transform	sbibm/utils/nflows.py	/^    standardizing_transform = transforms.AffineTransform($/;"	v
stats	sbibm/third_party/kgof/data.py	/^import scipy.stats as stats$/;"	i
stats	sbibm/third_party/kgof/density.py	/^import scipy.stats as stats$/;"	i
stats	sbibm/third_party/kgof/goftest.py	/^import scipy.stats as stats$/;"	i
stats	sbibm/third_party/kgof/intertst.py	/^import scipy.stats as stats$/;"	i
stats	sbibm/third_party/kgof/mmd.py	/^import scipy.stats as stats$/;"	i
stats	sbibm/third_party/kgof/test/test_density.py	/^import scipy.stats as stats$/;"	i
stats	sbibm/third_party/kgof/test/test_goftest.py	/^import scipy.stats as stats$/;"	i
stats	sbibm/third_party/kgof/test/test_kernel.py	/^import scipy.stats as stats$/;"	i
stats	tests/metrics/test_fssd.py	/^import scipy.stats as stats$/;"	i
stats	tests/metrics/test_ksd.py	/^import scipy.stats as stats$/;"	i
status	setup.py	/^    def status(s):$/;"	m	class:UploadCommand
str	sbibm/third_party/kgof/goftest.py	/^from builtins import object, range, str, zip$/;"	i
str	sbibm/third_party/kgof/intertst.py	/^from builtins import str$/;"	i
str	sbibm/third_party/kgof/kernel.py	/^from builtins import object, str$/;"	i
str	sbibm/third_party/kgof/mmd.py	/^from builtins import str$/;"	i
subprocess	sbibm/utils/git.py	/^import subprocess$/;"	i
subsample	sbibm/third_party/kgof/data.py	/^    def subsample(self, n, seed=87, return_ind=False):$/;"	m	class:Data
subsample_ind	sbibm/third_party/kgof/util.py	/^def subsample_ind(n, k, seed=32):$/;"	f
subsample_rows	sbibm/third_party/kgof/util.py	/^def subsample_rows(X, k, seed=29):$/;"	f
sum	sbibm/third_party/igms/main.py	/^    def sum(self):$/;"	m	class:Matrix
summary	sbibm/utils/nflows.py	/^    summary = {$/;"	v
sums	sbibm/third_party/igms/main.py	/^    def sums(self):$/;"	m	class:SymmetricMatrix
sums_sq_sum	sbibm/third_party/igms/main.py	/^    def sums_sq_sum(self):$/;"	m	class:SymmetricMatrix
sumstats_simulator	sbibm/algorithms/pyabc/smcabc.py	/^        def sumstats_simulator(theta):$/;"	f	function:run
sumstats_transform	sbibm/algorithms/sbi/utils.py	/^    def sumstats_transform(x):$/;"	f	function:get_sass_transform
sys	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sys$/;"	i
sys	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sys$/;"	i
sys	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sys$/;"	i
sys	sbibm/utils/debug.py	/^import sys$/;"	i
sys	setup.py	/^import sys$/;"	i
sysimage	sbibm/tasks/lotka_volterra/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
sysimage	sbibm/tasks/sir/task.py	/^import sbibm  # noqa -- needed for setting sysimage path$/;"	i
tabulate	sbibm/third_party/kgof/plot.py	/^        import tabulate$/;"	i
tail_bound	sbibm/utils/nflows.py	/^                            tail_bound=3.0,$/;"	v
tail_bound	sbibm/utils/nflows.py	/^                            tail_bound=np.sqrt($/;"	v
tails	sbibm/utils/nflows.py	/^                            tails="linear",$/;"	v
task	sbibm/tasks/bernoulli_glm/task.py	/^    task = BernoulliGLM()$/;"	v	class:BernoulliGLM
task	sbibm/tasks/gaussian_linear/task.py	/^    task = GaussianLinear()$/;"	v	class:GaussianLinear
task	sbibm/tasks/gaussian_linear_uniform/task.py	/^    task = GaussianLinearUniform()$/;"	v	class:GaussianLinearUniform
task	sbibm/tasks/gaussian_mixture/task.py	/^    task = GaussianMixture()$/;"	v	class:GaussianMixture
task	sbibm/tasks/lotka_volterra/task.py	/^    task = LotkaVolterra()$/;"	v	class:LotkaVolterra
task	sbibm/tasks/sir/task.py	/^    task = SIR()$/;"	v	class:SIR
task	sbibm/tasks/slcp/task.py	/^    task = SLCP()$/;"	v	class:SLCP
task	sbibm/tasks/two_moons/task.py	/^    task = TwoMoons()$/;"	v	class:TwoMoons
task	tests/algorithms/sbi/test_abc_run_methods.py	/^        task=task,$/;"	v
task	tests/algorithms/sbi/test_abc_run_methods.py	/^    task = sbibm.get_task(task_name)$/;"	v
task	tests/algorithms/test_baseline_posterior.py	/^        task=task,$/;"	v
task	tests/algorithms/test_baseline_posterior.py	/^    task = sbibm.get_task(task_name)$/;"	v
task	tests/algorithms/test_baseline_prior.py	/^        task=task,$/;"	v
task	tests/algorithms/test_baseline_prior.py	/^    task = sbibm.get_task(task_name)$/;"	v
task	tests/algorithms/test_baseline_rejection.py	/^        task=task,$/;"	v
task	tests/algorithms/test_baseline_rejection.py	/^    task = sbibm.get_task(task_name)$/;"	v
task	tests/algorithms/test_baseline_sir.py	/^        task=task,$/;"	v
task	tests/algorithms/test_baseline_sir.py	/^    task = sbibm.get_task(task_name)$/;"	v
task_list	tests/tasks/test_task_rej_abc_demo.py	/^task_list = [tn for tn in get_available_tasks() if not re.search("noref|lotka|sir", tn)]$/;"	v
tb_acf	sbibm/algorithms/pyro/utils/tensorboard.py	/^def tb_acf(writer, mcmc, site_name="parameters", num_samples=1000, maxlags=50):$/;"	f
tb_ess	sbibm/algorithms/pyro/utils/tensorboard.py	/^def tb_ess(writer, mcmc, site_name="parameters"):$/;"	f
tb_make_hook_fn	sbibm/algorithms/pyro/utils/tensorboard.py	/^def tb_make_hook_fn(writer, site_name="parameters"):$/;"	f
tb_make_writer	sbibm/algorithms/pyro/mcmc.py	/^from sbibm.utils.tensorboard import tb_make_writer, tb_plot_posterior$/;"	i
tb_make_writer	sbibm/utils/tensorboard.py	/^def tb_make_writer($/;"	f
tb_marginals	sbibm/algorithms/pyro/utils/tensorboard.py	/^def tb_marginals(writer, mcmc, site_name="parameters", num_samples=1000):$/;"	f
tb_plot_posterior	sbibm/algorithms/pyro/mcmc.py	/^from sbibm.utils.tensorboard import tb_make_writer, tb_plot_posterior$/;"	i
tb_plot_posterior	sbibm/algorithms/pyro/utils/tensorboard.py	/^from sbibm.utils.tensorboard import tb_plot_posterior$/;"	i
tb_plot_posterior	sbibm/utils/tensorboard.py	/^def tb_plot_posterior($/;"	f
tb_posteriors	sbibm/algorithms/pyro/utils/tensorboard.py	/^def tb_posteriors(writer, mcmc, site_name="parameters", num_samples=1000):$/;"	f
tb_r_hat	sbibm/algorithms/pyro/utils/tensorboard.py	/^def tb_r_hat(writer, mcmc, site_name="parameters"):$/;"	f
tearDown	sbibm/third_party/kgof/test/test_density.py	/^    def tearDown(self):$/;"	m	class:TestIsotropicNormal
tearDown	sbibm/third_party/kgof/test/test_goftest.py	/^    def tearDown(self):$/;"	m	class:TestFSSD
tearDown	sbibm/third_party/kgof/test/test_kernel.py	/^    def tearDown(self):$/;"	m	class:TestKGauss
tempfile	sbibm/algorithms/pyabc/smcabc.py	/^import tempfile$/;"	i
test_auto_init_opt_fssd	sbibm/third_party/kgof/test/test_goftest.py	/^    def test_auto_init_opt_fssd(self):$/;"	m	class:TestFSSD
test_basic	sbibm/third_party/kgof/test/test_goftest.py	/^    def test_basic(self):$/;"	m	class:TestFSSD
test_basic	sbibm/third_party/kgof/test/test_goftest.py	/^    def test_basic(self):$/;"	m	class:TestSteinWitness
test_basic	sbibm/third_party/kgof/test/test_kernel.py	/^    def test_basic(self):$/;"	m	class:TestKGauss
test_benchmark_metrics_selfobserved	tests/tasks/test_task_benchmarks.py	/^def test_benchmark_metrics_selfobserved(task_name):$/;"	f
test_c2st	tests/metrics/test_c2st.py	/^def test_c2st():$/;"	f
test_describe_theta	tests/tasks/test_task_interface.py	/^def test_describe_theta(task_name):$/;"	f
test_describe_x	tests/tasks/test_task_interface.py	/^def test_describe_x(task_name):$/;"	f
test_fssd	tests/metrics/test_fssd.py	/^def test_fssd():$/;"	f
test_fssd_opt	tests/metrics/test_fssd.py	/^def test_fssd_opt():$/;"	f
test_gradXY_sum	sbibm/third_party/kgof/test/test_kernel.py	/^    def test_gradXY_sum(self):$/;"	m	class:TestKGauss
test_gradX_y	sbibm/third_party/kgof/test/test_kernel.py	/^    def test_gradX_y(self):$/;"	m	class:TestKGauss
test_grad_log	sbibm/third_party/kgof/test/test_density.py	/^    def test_grad_log(self):$/;"	m	class:TestIsotropicNormal
test_ksd	tests/metrics/test_ksd.py	/^def test_ksd():$/;"	f
test_log_den	sbibm/third_party/kgof/test/test_density.py	/^    def test_log_den(self):$/;"	m	class:TestIsotropicNormal
test_log_prob_fn	tests/utils/test_pyro.py	/^def test_log_prob_fn(task_name, jit_compile, batch_size, implementation, posterior):$/;"	f
test_log_prob_grad_fn	tests/utils/test_pyro.py	/^def test_log_prob_grad_fn(jit_compile, batch_size, implementation):$/;"	f
test_median_distance	tests/metrics/test_ppc.py	/^def test_median_distance():$/;"	f
test_mmd	tests/metrics/test_mmd.py	/^def test_mmd():$/;"	f
test_multivariate_normal_density	sbibm/third_party/kgof/test/test_density.py	/^    def test_multivariate_normal_density(self):$/;"	m	class:TestGaussianMixture
test_nle_posterior	tests/algorithms/sbi/test_snle_posterior.py	/^def test_nle_posterior($/;"	f
test_npe_posterior	tests/algorithms/sbi/test_snpe_posterior.py	/^def test_npe_posterior($/;"	f
test_nre_posterior	tests/algorithms/sbi/test_snre_posterior.py	/^def test_nre_posterior($/;"	f
test_obtain_prior_from_task	tests/tasks/test_task_interface.py	/^def test_obtain_prior_from_task(task_name):$/;"	f
test_obtain_prior_samples_from_task	tests/tasks/test_task_interface.py	/^def test_obtain_prior_samples_from_task(task_name):$/;"	f
test_obtain_simulator_from_task	tests/tasks/test_task_interface.py	/^def test_obtain_simulator_from_task(task_name):$/;"	f
test_optimized_fssd	sbibm/third_party/kgof/test/test_goftest.py	/^    def test_optimized_fssd(self):$/;"	m	class:TestFSSD
test_pair_gradX_Y	sbibm/third_party/kgof/test/test_kernel.py	/^    def test_pair_gradX_Y(self):$/;"	m	class:TestKGauss
test_posterior	tests/algorithms/test_baseline_posterior.py	/^def test_posterior($/;"	f
test_posterior_moments_metrics	tests/metrics/test_moments.py	/^def test_posterior_moments_metrics():$/;"	f
test_prior	tests/algorithms/test_baseline_prior.py	/^def test_prior($/;"	f
test_quick_demo_c2st	tests/tasks/test_task_rej_abc_demo.py	/^def test_quick_demo_c2st(task_name):$/;"	f
test_quick_demo_rej_abc	tests/tasks/test_task_rej_abc_demo.py	/^def test_quick_demo_rej_abc(task_name):$/;"	f
test_reference_posterior_exists	tests/tasks/test_task_interface.py	/^def test_reference_posterior_exists(task_name):$/;"	f
test_reference_posterior_not_called	tests/tasks/test_task_interface.py	/^def test_reference_posterior_not_called(task_name):$/;"	f
test_rejection	tests/algorithms/test_baseline_rejection.py	/^def test_rejection($/;"	f
test_rejection_with_proposal	tests/algorithms/test_baseline_rejection.py	/^def test_rejection_with_proposal($/;"	f
test_retrieve_observation_from_task	tests/tasks/test_task_interface.py	/^def test_retrieve_observation_from_task(task_name):$/;"	f
test_run_posterior_interface	tests/algorithms/sbi/test_abc_run_methods.py	/^def test_run_posterior_interface($/;"	f
test_simulate_from_thetas	tests/tasks/test_task_interface.py	/^def test_simulate_from_thetas(task_name):$/;"	f
test_sir_with_proposal	tests/algorithms/test_baseline_sir.py	/^def test_sir_with_proposal($/;"	f
test_task_can_be_obtained	tests/tasks/test_task_interface.py	/^def test_task_can_be_obtained(task_name):$/;"	f
test_task_constructs	tests/tasks/two_moons/test_task.py	/^def test_task_constructs():$/;"	f
test_transforms	tests/utils/test_pyro.py	/^def test_transforms(task_name):$/;"	f
test_transforms_shapes	tests/tasks/test_task_interface.py	/^def test_transforms_shapes(task_name, batch_size=5):$/;"	f
test_ustat_h1_mean_variance	sbibm/third_party/kgof/test/test_goftest.py	/^    def test_ustat_h1_mean_variance(self):$/;"	m	class:TestFSSD
testing	sbibm/third_party/kgof/test/test_goftest.py	/^import numpy.testing as testing$/;"	i
testing	sbibm/third_party/kgof/test/test_kernel.py	/^import numpy.testing as testing$/;"	i
tgof	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
tgof	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
theta_adjusted	sbibm/algorithms/sbi/utils.py	/^    theta_adjusted = transforms(theta)$/;"	v
third_party	sbibm/third_party/kgof/config.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/data.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof as kgof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof as kgof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.intertst as tgof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.mmd as mgof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof as kgof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/glo.py	/^    import sbibm.third_party.kgof.config as config$/;"	i
third_party	sbibm/third_party/kgof/glo.py	/^import sbibm.third_party.kgof as kgof$/;"	i
third_party	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.config as config$/;"	i
third_party	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/plot.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.glo as glo$/;"	i
third_party	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof as kgof$/;"	i
third_party	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
third_party	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof$/;"	i
third_party	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.data as data$/;"	i
third_party	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.density as density$/;"	i
third_party	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.goftest as gof$/;"	i
third_party	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.kernel as kernel$/;"	i
third_party	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
time	sbibm/algorithms/elfi/bolfi.py	/^import time$/;"	i
time	sbibm/algorithms/pyabc/smcabc.py	/^import time$/;"	i
time	sbibm/algorithms/pyro/mcmc.py	/^import time$/;"	i
time	sbibm/algorithms/pytorch/baseline_grid.py	/^import time$/;"	i
time	sbibm/algorithms/pytorch/baseline_rejection.py	/^import time$/;"	i
time	sbibm/algorithms/pytorch/baseline_sir.py	/^import time$/;"	i
time	sbibm/algorithms/pytorch/utils/proposal.py	/^import time$/;"	i
time	sbibm/metrics/mmd.py	/^import time$/;"	i
time	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import time$/;"	i
time	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import time$/;"	i
time	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import time$/;"	i
time	sbibm/third_party/kgof/util.py	/^import time$/;"	i
to_mat	sbibm/third_party/torch_two_sample/main.py	/^    def to_mat(self, triu):$/;"	m	class:TreeMarginals
torch	sbibm/algorithms/elfi/bolfi.py	/^import torch$/;"	i
torch	sbibm/algorithms/elfi/utils/wrapper.py	/^import torch$/;"	i
torch	sbibm/algorithms/pyabc/pyabc_utils.py	/^import torch$/;"	i
torch	sbibm/algorithms/pyabc/smcabc.py	/^import torch$/;"	i
torch	sbibm/algorithms/pyabcranger/abcrf.py	/^import torch$/;"	i
torch	sbibm/algorithms/pyro/mcmc.py	/^import torch$/;"	i
torch	sbibm/algorithms/pytorch/baseline_grid.py	/^import torch$/;"	i
torch	sbibm/algorithms/pytorch/baseline_posterior.py	/^import torch$/;"	i
torch	sbibm/algorithms/pytorch/baseline_prior.py	/^import torch$/;"	i
torch	sbibm/algorithms/pytorch/baseline_rejection.py	/^import torch$/;"	i
torch	sbibm/algorithms/pytorch/baseline_runtime.py	/^import torch$/;"	i
torch	sbibm/algorithms/pytorch/baseline_sir.py	/^import torch$/;"	i
torch	sbibm/algorithms/pytorch/utils/proposal.py	/^import torch$/;"	i
torch	sbibm/algorithms/sbi/mcabc.py	/^import torch$/;"	i
torch	sbibm/algorithms/sbi/sl.py	/^import torch$/;"	i
torch	sbibm/algorithms/sbi/sl.py	/^import torch.nn as nn$/;"	i
torch	sbibm/algorithms/sbi/smcabc.py	/^import torch$/;"	i
torch	sbibm/algorithms/sbi/snle.py	/^import torch$/;"	i
torch	sbibm/algorithms/sbi/snpe.py	/^import torch$/;"	i
torch	sbibm/algorithms/sbi/snre.py	/^import torch$/;"	i
torch	sbibm/algorithms/sbi/utils.py	/^import torch$/;"	i
torch	sbibm/metrics/c2st.py	/^import torch$/;"	i
torch	sbibm/metrics/ksd.py	/^import torch$/;"	i
torch	sbibm/metrics/mmd.py	/^import torch$/;"	i
torch	sbibm/metrics/moments.py	/^import torch$/;"	i
torch	sbibm/metrics/mvn_kl.py	/^import torch$/;"	i
torch	sbibm/metrics/ppc.py	/^import torch$/;"	i
torch	sbibm/tasks/bernoulli_glm/task.py	/^import torch$/;"	i
torch	sbibm/tasks/gaussian_linear/task.py	/^import torch$/;"	i
torch	sbibm/tasks/gaussian_linear_uniform/task.py	/^import torch$/;"	i
torch	sbibm/tasks/gaussian_mixture/task.py	/^import torch$/;"	i
torch	sbibm/tasks/lotka_volterra/task.py	/^import torch$/;"	i
torch	sbibm/tasks/simulator.py	/^import torch$/;"	i
torch	sbibm/tasks/sir/task.py	/^import torch$/;"	i
torch	sbibm/tasks/slcp/task.py	/^import torch$/;"	i
torch	sbibm/tasks/task.py	/^import torch$/;"	i
torch	sbibm/tasks/two_moons/task.py	/^import torch$/;"	i
torch	sbibm/third_party/igms/main.py	/^import torch$/;"	i
torch	sbibm/third_party/torch_two_sample/main.py	/^import torch$/;"	i
torch	sbibm/utils/io.py	/^import torch$/;"	i
torch	sbibm/utils/nflows.py	/^import torch$/;"	i
torch	sbibm/utils/pyro.py	/^import torch$/;"	i
torch	sbibm/utils/tensorboard.py	/^import torch$/;"	i
torch	sbibm/utils/torch.py	/^import torch$/;"	i
torch	sbibm/visualisation/posterior.py	/^import torch$/;"	i
torch	tests/algorithms/sbi/test_abc_run_methods.py	/^import torch$/;"	i
torch	tests/algorithms/sbi/test_snle_posterior.py	/^import torch$/;"	i
torch	tests/algorithms/sbi/test_snpe_posterior.py	/^import torch$/;"	i
torch	tests/algorithms/sbi/test_snre_posterior.py	/^import torch$/;"	i
torch	tests/algorithms/test_baseline_posterior.py	/^import torch$/;"	i
torch	tests/algorithms/test_baseline_prior.py	/^import torch$/;"	i
torch	tests/algorithms/test_baseline_rejection.py	/^import torch$/;"	i
torch	tests/algorithms/test_baseline_sir.py	/^import torch$/;"	i
torch	tests/metrics/test_c2st.py	/^import torch$/;"	i
torch	tests/metrics/test_fssd.py	/^import torch$/;"	i
torch	tests/metrics/test_fssd.py	/^import torch.distributions.transforms as transforms$/;"	i
torch	tests/metrics/test_ksd.py	/^import torch$/;"	i
torch	tests/metrics/test_ksd.py	/^import torch.distributions.transforms as transforms$/;"	i
torch	tests/metrics/test_mmd.py	/^import torch$/;"	i
torch	tests/metrics/test_moments.py	/^import torch$/;"	i
torch	tests/metrics/test_ppc.py	/^import torch$/;"	i
torch	tests/metrics/utils.py	/^import torch$/;"	i
torch	tests/tasks/test_task_benchmarks.py	/^import torch$/;"	i
torch	tests/tasks/test_task_interface.py	/^import torch$/;"	i
torch	tests/tasks/test_task_rej_abc_demo.py	/^import torch$/;"	i
torch	tests/tasks/two_moons/test_task.py	/^import torch$/;"	i
torch	tests/utils/test_pyro.py	/^import torch$/;"	i
torchutils	sbibm/utils/nflows.py	/^from nflows.utils import torchutils$/;"	i
tp_ExpQuadKernel	sbibm/metrics/mmd.py	/^from sbibm.third_party.igms.main import ExpQuadKernel as tp_ExpQuadKernel$/;"	i
tp_MMDStatistic	sbibm/metrics/mmd.py	/^from sbibm.third_party.torch_two_sample.main import MMDStatistic as tp_MMDStatistic$/;"	i
tp_mmd2_unbiased	sbibm/metrics/mmd.py	/^from sbibm.third_party.igms.main import mmd2_unbiased as tp_mmd2_unbiased$/;"	i
tqdm	sbibm/algorithms/pyabcranger/abcrf.py	/^from tqdm import tqdm$/;"	i
tqdm	sbibm/algorithms/pytorch/baseline_grid.py	/^from tqdm.auto import tqdm$/;"	i
tqdm	sbibm/algorithms/pytorch/baseline_rejection.py	/^from tqdm.auto import tqdm$/;"	i
tqdm	sbibm/algorithms/pytorch/baseline_runtime.py	/^from tqdm.auto import tqdm$/;"	i
tqdm	sbibm/algorithms/pytorch/baseline_sir.py	/^from tqdm.auto import tqdm$/;"	i
tqdm	sbibm/tasks/bernoulli_glm/task.py	/^        from tqdm import tqdm$/;"	i
tqdm	sbibm/utils/nflows.py	/^from tqdm import tqdm  # noqa$/;"	i
tr_proportion	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^tr_proportion = 0.2$/;"	v
tr_proportion	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^tr_proportion = 0.2$/;"	v
tr_proportion	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^tr_proportion = 0.5$/;"	v
tr_te_indices	sbibm/third_party/kgof/util.py	/^def tr_te_indices(n, tr_proportion, seed=9282):$/;"	f
trace	sbibm/third_party/igms/main.py	/^    def trace(self):$/;"	m	class:ConstDiagMatrix
trace	sbibm/third_party/igms/main.py	/^    def trace(self):$/;"	m	class:SquareMatrix
trace_prob_evaluator	sbibm/utils/pyro.py	/^        trace_prob_evaluator = TraceEinsumEvaluator($/;"	v
traceback	sbibm/utils/debug.py	/^        import traceback$/;"	i
traceback	sbibm/utils/debug.py	/^    import traceback$/;"	i
train	sbibm/algorithms/sbi/sl.py	/^    def train(self, *args, **kwargs):$/;"	m	class:SynthLikNet
train_flow	sbibm/algorithms/pytorch/utils/proposal.py	/^from sbibm.utils.nflows import get_flow, train_flow$/;"	i
train_flow	sbibm/utils/nflows.py	/^def train_flow($/;"	f
train_loader	sbibm/utils/nflows.py	/^    train_loader = data.DataLoader($/;"	v
transform	sbibm/utils/nflows.py	/^        transform = dist.transforms.identity_transform$/;"	v
transform	sbibm/utils/nflows.py	/^        transform = standardizing_transform$/;"	v
transform	sbibm/utils/nflows.py	/^        transform = transforms.CompositeTransform($/;"	v
transform	sbibm/utils/nflows.py	/^        transform = transforms.CompositeTransform([standardizing_transform, transform])$/;"	v
transform_net_create_fn	sbibm/utils/nflows.py	/^                            transform_net_create_fn=lambda in_features, out_features: nets.ResidualNet($/;"	v
transforms	sbibm/utils/nflows.py	/^from nflows import flows, transforms$/;"	i
transforms	sbibm/utils/pyro.py	/^        transforms = {}$/;"	v
transforms	tests/metrics/test_fssd.py	/^import torch.distributions.transforms as transforms$/;"	i
transforms	tests/metrics/test_ksd.py	/^import torch.distributions.transforms as transforms$/;"	i
triu	sbibm/third_party/torch_two_sample/main.py	/^    def triu(self, matrix):$/;"	m	class:TreeMarginals
tst	sbibm/third_party/kgof/intertst.py	/^import freqopttest.tst as tst$/;"	i
tst	sbibm/third_party/kgof/mmd.py	/^import freqopttest.tst as tst$/;"	i
unflatten	sbibm/third_party/kgof/goftest.py	/^        def unflatten(x):$/;"	f	function:GaussFSSD.optimize_locs_widths
unflatten	sbibm/third_party/kgof/goftest.py	/^        def unflatten(x):$/;"	f	function:IMQFSSD.optimize_locs
unflatten	sbibm/third_party/kgof/goftest.py	/^        def unflatten(x):$/;"	f	function:IMQFSSD.optimize_locs_params
unflatten_data	sbibm/tasks/lotka_volterra/task.py	/^    def unflatten_data(self, data: torch.Tensor) -> torch.Tensor:$/;"	m	class:LotkaVolterra
unflatten_data	sbibm/tasks/sir/task.py	/^    def unflatten_data(self, data: torch.Tensor) -> torch.Tensor:$/;"	m	class:SIR
unflatten_data	sbibm/tasks/slcp/task.py	/^    def unflatten_data(self, data: torch.Tensor) -> torch.Tensor:$/;"	m	class:SLCP
unflatten_data	sbibm/tasks/task.py	/^    def unflatten_data(self, data: torch.Tensor) -> torch.Tensor:$/;"	m	class:Task
unicode_literals	sbibm/third_party/kgof/util.py	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
unittest	sbibm/third_party/kgof/test/test_density.py	/^import unittest$/;"	i
unittest	sbibm/third_party/kgof/test/test_goftest.py	/^import unittest$/;"	i
unittest	sbibm/third_party/kgof/test/test_kernel.py	/^import unittest$/;"	i
url	setup.py	/^    url=URL,$/;"	v
use_batch_norm	sbibm/utils/nflows.py	/^                                use_batch_norm=False,$/;"	v
use_batch_norm	sbibm/utils/nflows.py	/^                            use_batch_norm=True,$/;"	v
use_batch_norm	sbibm/utils/nflows.py	/^            use_batch_norm=False,$/;"	v
use_residual_blocks	sbibm/utils/nflows.py	/^                            use_residual_blocks=False,$/;"	v
use_residual_blocks	sbibm/utils/nflows.py	/^            use_residual_blocks=True,$/;"	v
user_options	setup.py	/^    user_options = []$/;"	v	class:UploadCommand
ustat_h1_mean_variance	sbibm/third_party/kgof/goftest.py	/^    def ustat_h1_mean_variance(fea_tensor, return_variance=True, use_unbiased=True):$/;"	m	class:FSSD
util	sbibm/third_party/kgof/data.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/ex/ex1_vary_n.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/ex/ex2_prob_params.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/ex/ex3_vary_nlocs.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/intertst.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/mmd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/test/test_density.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/test/test_goftest.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	sbibm/third_party/kgof/test/test_kernel.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	tests/metrics/test_fssd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
util	tests/metrics/test_ksd.py	/^import sbibm.third_party.kgof.util as util$/;"	i
val_loader	sbibm/utils/nflows.py	/^    val_loader = data.DataLoader($/;"	v
validation_log_prob	sbibm/utils/nflows.py	/^        validation_log_prob = log_prob_sum \/ num_validation_examples$/;"	v
version	setup.py	/^    version=about["__version__"],$/;"	v
warn_bounded_domain	sbibm/third_party/kgof/density.py	/^def warn_bounded_domain(self):$/;"	f
warnings	sbibm/algorithms/pyro/mcmc.py	/^import warnings$/;"	i
warnings	sbibm/third_party/kgof/goftest.py	/^    import warnings$/;"	i
warnings	sbibm/utils/pyro.py	/^import warnings$/;"	i
warnings	sbibm/utils/torch.py	/^import warnings$/;"	i
with_metaclass	sbibm/third_party/kgof/data.py	/^from future.utils import with_metaclass$/;"	i
with_metaclass	sbibm/third_party/kgof/density.py	/^from future.utils import with_metaclass$/;"	i
with_metaclass	sbibm/third_party/kgof/goftest.py	/^from future.utils import with_metaclass$/;"	i
with_metaclass	sbibm/third_party/kgof/kernel.py	/^from future.utils import with_metaclass$/;"	i
wrap_posterior	sbibm/algorithms/sbi/utils.py	/^def wrap_posterior(posterior, transforms):$/;"	f
wrap_prior	sbibm/algorithms/pyabc/pyabc_utils.py	/^def wrap_prior(task):$/;"	f
wrap_prior_dist	sbibm/algorithms/sbi/utils.py	/^def wrap_prior_dist(prior_dist, transforms):$/;"	f
wrap_simulator_fn	sbibm/algorithms/sbi/utils.py	/^def wrap_simulator_fn(simulator_fn, transforms):$/;"	f
wrapper	sbibm/third_party/igms/main.py	/^    def wrapper(self, *args):$/;"	f	function:_cache
wraps	sbibm/third_party/igms/main.py	/^from functools import wraps$/;"	i
y	sbibm/algorithms/sbi/utils.py	/^            y=theta[:, parameter_idx],$/;"	v
zip	sbibm/third_party/kgof/goftest.py	/^from builtins import object, range, str, zip$/;"	i
zip	sbibm/third_party/kgof/util.py	/^from builtins import int, range, zip$/;"	i
